---

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Check that server_deploy_nginx_server_namespace is defined
  fail: msg="Bailing out. This role requires 'server_deploy_nginx_server_namespace'"
  when: not server_deploy_nginx_server_namespace

- name: Check that server_deploy_nginx_server_directory is defined
  fail: msg="Bailing out. This role requires 'server_deploy_nginx_server_directory'"
  when: not server_deploy_nginx_server_directory

- name: Get the stats of {{ server_deploy_nginx_server_directory }}
  stat:
    path: "{{ server_deploy_nginx_server_directory }}"
  register: directory_stats

- name: Fail if the following path is not a directory {{ server_deploy_nginx_server_directory }}
  fail: msg="'{{ server_deploy_nginx_server_directory }}' isn't a reachable directory."
  when: not directory_stats.stat.exists or not directory_stats.stat.isdir

- name: Store the listing of the server directory (debug)
  shell:
    find "{{ server_deploy_nginx_server_directory }}"
      > "{{ artifact_extra_logs_dir }}/server_files"

- name: Create nginx namespace
  shell:
    set -o pipefail;
    oc create ns "{{ server_deploy_nginx_server_namespace }}" -oyaml --dry-run=client | oc apply -f-

- name: Delete nginx ConfigMaps, if they exist
  command:
    oc delete cm/nginx-content cm/nginx-config
       --ignore-not-found
       -n "{{ server_deploy_nginx_server_namespace }}"

- name: Create nginx-content ConfigMap
  command:
    oc create cm nginx-content
       -n "{{ server_deploy_nginx_server_namespace }}"
       --from-file="{{ server_deploy_nginx_server_directory }}"
# ^^^ may fail silently if the directory is invalid

- name: Create nginx-config ConfigMap
  command:
    oc create cm nginx-config
       -n "{{ server_deploy_nginx_server_namespace }}"
       --from-file=nginx.conf="{{ server_deploy_nginx_server_config_file }}"

- name: Ensure that the ConfigMaps exist # may fail if the directory is invalid
  shell:
    set -o pipefail;
    oc get cm nginx-content -ojson -n "{{ server_deploy_nginx_server_namespace }}"
       | jq -r '.data | keys[]'

- name: Delete nginx deployment, if it exists
  command:
    oc delete
       -f "{{ server_deploy_nginx_server_deployment }}"
       --ignore-not-found
       -n "{{ server_deploy_nginx_server_namespace }}"

- name: Create the nginx deployment
  command:
    oc create
       -f "{{ server_deploy_nginx_server_deployment }}"
       -n "{{ server_deploy_nginx_server_namespace }}"

- name: Delete the nginx route, if it exists
  command:
    oc delete route/nginx
       --ignore-not-found
       -n "{{ server_deploy_nginx_server_namespace }}"

- name: Create the nginx HTTP route
  command:
    oc expose svc/nginx --port=http
       -n "{{ server_deploy_nginx_server_namespace }}"

- name: Create the nginx HTTPS route
  shell:
    set -o pipefail;
    oc create route passthrough nginx-secure
       --service=nginx --port=https
       -n "{{ server_deploy_nginx_server_namespace }}"
       --dry-run=client -oyaml
      | yq -y '.apiVersion = "route.openshift.io/v1"'
      | tee "{{ artifact_extra_logs_dir }}/src/route_nginx-secure.yaml"
      | oc apply -f -

- name: Wait for the nginx deployment to be ready
  command:
    oc get deploy/nginx-deployment
       -oyaml
       -n "{{ server_deploy_nginx_server_namespace }}"
       -ojsonpath={.status.readyReplicas}
  register: wait_nginx_ready
  retries: 20
  delay: 30
  until: wait_nginx_ready.stdout
  failed_when: false

- name: Get the status of the Deployment and Pod
  shell:
    oc get deploy/nginx-deployment
       -owide
       -n "{{ server_deploy_nginx_server_namespace }}" > "{{ artifact_extra_logs_dir }}/deployment.status";
    oc get pods -l app=nginx
       -owide
       -n "{{ server_deploy_nginx_server_namespace }}" > "{{ artifact_extra_logs_dir }}/pod.status";
    oc describe pods -l app=nginx
       -n "{{ server_deploy_nginx_server_namespace }}" > "{{ artifact_extra_logs_dir }}/pod.descr";

- name: Show the host of the nginx route
  command:
    oc get route/nginx -ojsonpath={.spec.host}
       -n "{{ server_deploy_nginx_server_namespace }}"

- name: Show and Save the host of the nginx route
  shell: |
    hostname=$(oc get route/nginx -ojsonpath={.spec.host} -n "{{ server_deploy_nginx_server_namespace }}")
    echo "$hostname"
    echo "$hostname" > "{{ artifact_extra_logs_dir }}/hostname"

- name: Fail if the nginx deployment is not ready
  command:
    oc get deploy/nginx-deployment
       -oyaml
       -n "{{ server_deploy_nginx_server_namespace }}"
       -ojsonpath={.status.readyReplicas}
  failed_when: not wait_nginx_ready.stdout
