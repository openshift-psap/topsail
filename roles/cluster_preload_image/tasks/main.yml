---
- name: Create the src directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src"
    state: directory
    mode: '0755'

- name: Lookup the namespace user ID range
  shell:
    set -o pipefail;

    oc get ns {{ cluster_preload_image_namespace }} -ojsonpath={.metadata.annotations} | jq  -r '.["openshift.io/sa.scc.uid-range"]' | cut -d/ -f1
  register: namespace_uid_range_cmd

- name: Save the namespace uid as run_as_user
  set_fact:
    run_as_user: "{{ namespace_uid_range_cmd.stdout }}"

- name: Apply the DaemonSet template
  template:
    src: "{{ cluster_preload_image_ds_template }}"
    dest: "{{ artifact_extra_logs_dir }}/src/preload_daemonset.yaml"
    mode: '0400'

- name: Delete the DaemonSet, it it exists
  command:
    oc delete -f "{{ artifact_extra_logs_dir }}/src/preload_daemonset.yaml"
       --ignore-not-found

- name: Get the number of nodes matching the label
  shell:
    set -o pipefail;
    oc get nodes -oname
    {% if cluster_preload_image_node_selector_key %}
       -l{{ cluster_preload_image_node_selector_key }}={{ cluster_preload_image_node_selector_value }}
    {% endif %}
       | wc -l
  register: number_target_nodes

- name: Fail if there is no target node
  fail: msg="The node selector '{{ cluster_preload_image_node_selector_key }}={{ cluster_preload_image_node_selector_value }}' does not match any node"
  when: number_target_nodes.stdout == "0"

- name: Preload the image
  block:
  - name: Create the DaemonSet
    command:
      oc create -f "{{ artifact_extra_logs_dir }}/src/preload_daemonset.yaml"

# ---

  - name: Wait for the desired number to be populated
    command:
      oc get ds/{{ cluster_preload_image_name }}
         '-ojsonpath={.status.desiredNumberScheduled}'
         -n {{ cluster_preload_image_namespace }}
    register: desired_number_scheduled_cmd
    retries: 3
    delay: 15
    until: desired_number_scheduled_cmd or "0" | int > 0

  - name: Wait for the pods to be scheduled
    shell:
      set -o pipefail;
      oc get ds/{{ cluster_preload_image_name }}
         -ojson
         -n {{ cluster_preload_image_namespace }}
         | jq '.status.desiredNumberScheduled - .status.currentNumberScheduled'
    register: current_number_not_scheduled_cmd
    retries: 3
    delay: 15
    until: current_number_not_scheduled_cmd.stdout | int == 0

  - name: Wait for the pods to be ready
    shell:
      set -o pipefail;
      oc get ds/{{ cluster_preload_image_name }}
         -ojson
         -n {{ cluster_preload_image_namespace }}
         | jq '.status.desiredNumberScheduled - .status.numberReady'
    register: current_number_not_ready_cmd
    retries: 90
    delay: 10
    until: current_number_not_ready_cmd.stdout | int == 0

  - name: Get the final desired number
    command:
      oc get ds/{{ cluster_preload_image_name }}
         '-ojsonpath={.status.desiredNumberScheduled}'
         -n {{ cluster_preload_image_namespace }}
    register: final_desired_number_scheduled_cmd

  - name: Fail if the image has been preloaded on 0 nodes
    fail: msg="The node selector '{{ cluster_preload_image_node_selector_key }}={{ cluster_preload_image_node_selector_value }}' did not match any node"
    when: final_desired_number_scheduled_cmd.stdout | int == 0

  always:
  - name: Get the description of the preload Pods
    shell:
      oc describe pods -l name={{ cluster_preload_image_name }}
         -n {{ cluster_preload_image_namespace }}
         > "{{ artifact_extra_logs_dir }}/pods.descr"
    failed_when: false

  - name: Get the status of the preload Pods
    shell:
      oc get pods -l name={{ cluster_preload_image_name }}
         -owide
         -n {{ cluster_preload_image_namespace }}
         > "{{ artifact_extra_logs_dir }}/pods.status"
    failed_when: false

  - name: Get the yaml of the daemonset
    shell:
      oc get ds/{{ cluster_preload_image_name }}
         -oyaml
         -n {{ cluster_preload_image_namespace }}
         > "{{ artifact_extra_logs_dir }}/daemonset.yaml"
    failed_when: false

  - name: Get the status of the daemonset
    shell:
      oc get ds/{{ cluster_preload_image_name }}
         -n {{ cluster_preload_image_namespace }}
         > "{{ artifact_extra_logs_dir }}/daemonset.status"
    failed_when: false

  - name: Delete the DaemonSet, it it exists
    command:
      oc delete -f "{{ artifact_extra_logs_dir }}/src/preload_daemonset.yaml" --ignore-not-found
    failed_when: false
