---
# In this file, we don't use Ansible templates, because the template
# content are secrets (passwords). With Python+envsubst, we're sure
# that the secrets won't be printed in clear.

- name: Ensure that the following secret properties path exists and it is a file {{ server_deploy_ldap_secret_properties_file }}
  stat:
    path: "{{ server_deploy_ldap_secret_properties_file }}"
  register: secret_props_file_stat
  failed_when: not secret_props_file_stat.stat.exists or secret_props_file_stat.stat.isdir

- name: Ensure that the username prefix is set
  fail: msg="username prefix isn't set"
  when: not server_deploy_ldap_username_prefix

- name: Ensure that the username count is set
  fail: msg="username count isn't set"
  when: server_deploy_ldap_username_count | int < 0

- name: Ensure that the LDAP IDP name is set
  fail: msg="LDAP IDP name isn't set"
  when: not server_deploy_ldap_idp_name

- name: Ensure that OCM is properly connected
  when: server_deploy_ldap_use_ocm | bool
  command: ocm describe cluster "{{ server_deploy_ldap_cluster_name }}"

- name: Ensure that ROSA is properly connected
  when: server_deploy_ldap_use_rosa | bool
  command: rosa describe cluster --cluster="{{ server_deploy_ldap_cluster_name }}"

- name: Prepare python command 1
  set_fact:
    py_secret_generator_cmd: >-
      python3 "{{ server_deploy_ldap_secret_generator }}" \
              --secret_props "{{ server_deploy_ldap_secret_properties_file }}" \
              --prefix "{{ server_deploy_ldap_username_prefix }}" \
              --nbusers "{{ server_deploy_ldap_username_count }}" \
              --admin_user "{{ server_deploy_ldap_admin_user }}"

- name: Ensure that the Python command works in test mode
  shell: |
    true; # mute ansible-lint warning
    {{ py_secret_generator_cmd }} --test

- name: Prepare python command 2
  set_fact:
    py_secret_generator: |
      eval "$({{ py_secret_generator_cmd }});"

- name: Ensure that the admin name is 'admin'
  shell:
    set -o pipefail;
    {{ py_secret_generator }}
    test "$cluster_ldap_adminuser" == "admin"

- name: Create the LDAP namespace
  shell:
    set -o pipefail;
    oc create namespace openldap --dry-run=client -oyaml | oc apply -f-

- name: Instantiate the LDAP secret
  shell:
    set -o pipefail;
    {{ py_secret_generator }}
    cat "{{ server_deploy_ldap_secret_template }}" | envsubst | oc apply -f-

- name: Apply the LDAP resources
  command: oc apply -f "{{ server_deploy_ldap_resources }}"

- name: Apply the Oauth template
  template:
    src: "{{ server_deploy_ldap_oauth }}"
    dest: "{{ artifact_extra_logs_dir }}/oauth_ldap.yaml"
    mode: '0400'

- name: Get LDAP URL
  command:
    yq .ldap.url "{{ artifact_extra_logs_dir }}/oauth_ldap.yaml"
  register: ldap_url_cmd

- name: Get LDAP Bind DN
  command:
    yq .ldap.bindDN "{{ artifact_extra_logs_dir }}/oauth_ldap.yaml"
  register: ldap_bind_dn_cmd

- name: Deploy on OCP
  when: not server_deploy_ldap_use_ocm
  block:
  - name: Create the LDAP binding secret
    shell:
      set -o pipefail;
      {{ py_secret_generator }}
      cat "{{ server_deploy_ldap_bind_secret_template }}" | envsubst | oc apply -f-

  - name: Get the list of identity providers
    command:
      oc get OAuth/cluster -ojsonpath='{range .spec.identityProviders[*]}{.name}{"\n"}{end}'
    register:
      oauth_idp_names_cmd

  - name: Append the LDAP OAuth identity provider, if not already set
    shell:
      set -o pipefail;
      oc get OAuth/cluster -ojson
         | jq --argjson idp "$(yq . "{{ artifact_extra_logs_dir }}/oauth_ldap.yaml" -c)"
              '.spec.identityProviders[.spec.identityProviders | length] |= $idp'
         | oc apply -f-
    when: server_deploy_ldap_idp_name not in oauth_idp_names_cmd.stdout

- name: Deploy on ROSA
  when: server_deploy_ldap_use_rosa | bool
  block:
  - name: Create the IDP resource
    shell: |
      set -o pipefail;
      {{ py_secret_generator }}
      rosa create idp \
          --type ldap \
          --cluster "{{ server_deploy_ldap_cluster_name }}" \
          --name "{{ server_deploy_ldap_idp_name }}" \
          --url "{{ ldap_url_cmd.stdout }}" \
          --bind-dn "{{ ldap_bind_dn_cmd.stdout }}" \
          --bind-password $(echo "$cluster_ldap_adminpassword") \
          --insecure

- name: Deploy on OCM
  when: server_deploy_ldap_use_ocm | bool
  block:
  - name: Create the IDP resource
    when: false # keeping it disabled until https://github.com/openshift-online/ocm-cli/issues/385 is resolved
    shell: |
      set -o pipefail;
      {{ py_secret_generator }}
      ocm create idp \
          --type ldap \
          --cluster "{{ server_deploy_ldap_cluster_name }}" \
          --name "{{ server_deploy_ldap_idp_name }}" \
          --url "{{ ldap_url_cmd.stdout }}" \
          --bind-dn "{{ ldap_bind_dn_cmd.stdout }}" \
          --bind-password $(echo "$cluster_ldap_adminpassword")
          # need to add --insecure here, when available in `ocm`.

  # Workaround until `ocm` supports the --insecure flag

  - name: Get the cluster ID
    shell:
      set -o pipefail;
      ocm describe cluster "{{ server_deploy_ldap_cluster_name }}" --json | jq .id -r
    register: cluster_id_cmd

  - name: Create the IDP resource manually
    shell: |
      set -o pipefail;
      {{ py_secret_generator }}

      export server_deploy_ldap_idp_name="{{ cluster_deploy_ldap_idp_name }}"
      url="https://api.openshift.com/api/clusters_mgmt/v1/clusters/{{ cluster_id_cmd.stdout }}/identity_providers";
      cat "{{ server_deploy_ldap_ocm_idp }}" | envsubst > /tmp/idp.json
      ocm post "$url" --body /tmp/idp.json

- name: Get the API URL
  command: oc whoami --show-server
  register: api_url_cmd

- name: Create the temporary kubeconfig file
  when: server_deploy_ldap_wait | bool
  ansible.builtin.file:
    path: /tmp/user_kubeconfig
    state: touch
    mode: '0644'

- name: Wait for the authentication to work
  when: server_deploy_ldap_wait | bool
  shell: |
    {{ py_secret_generator }}
    oc login "{{ api_url_cmd.stdout }}" \
             --username={{ server_deploy_ldap_username_prefix }}0 \
             --password=$cluster_ldap_password \
             --insecure-skip-tls-verify
  environment:
    KUBECONFIG: /tmp/user_kubeconfig
  register: oc_login
  delay: 30
  retries: 20
  until: oc_login.rc == 0

- name: Delete the temporary kubeconfig file
  when: server_deploy_ldap_wait | bool
  ansible.builtin.file:
    path: /tmp/user_kubeconfig
    state: absent
