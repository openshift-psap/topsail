---
- name: Get the content of the configuration file, if it is enabled
  when: local_ci_run_pr_config | default('', true) | trim
  command:
    cat "{{ local_ci_run_pr_config }}"
  register: local_ci_run_pr_config_content_cmd

- name: Get the content of the test description file, if it is enabled
  when: local_ci_run_test_description | default('', true) | trim
  command:
    cat "{{ local_ci_run_test_description }}"
  register: local_ci_run_test_description_content_cmd

- name: Ensure that the CI image exists
  command: oc get istag -n "{{ local_ci_run_namespace }}" "{{ local_ci_run_istag }}"

- name: Create the src directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src"
    state: directory
    mode: '0755'

- name: Apply the Pod template
  template:
    src: "{{ local_ci_run_pod_template }}"
    dest: "{{ artifact_extra_logs_dir }}/src/000_pod.yaml"
    mode: '0400'

- name: Delete any stalled CI execution Pod
  command: oc delete -f "{{ artifact_extra_logs_dir }}/src/000_pod.yaml" --ignore-not-found=true

- name: Create the CI Pod
  command: oc apply -f "{{ artifact_extra_logs_dir }}/src/000_pod.yaml"

- name: Wait for the Pod to start running
  shell:
    set -o pipefail;
    oc get -f "{{ artifact_extra_logs_dir }}/src/000_pod.yaml"
       --no-headers | awk '{print $3}'
  register: wait_pod_start
  retries: 20
  delay: 5
  until: wait_pod_start.stdout in ["Running", "Error", "Init:Error", "Completed", "NotReady"]

- name: Capture the Pod logs
  shell:
    set -o pipefail;
    oc logs -n "{{ local_ci_run_namespace }}" "pod/{{ local_ci_run_pod_name }}" -c fetch-git
       > {{ artifact_extra_logs_dir }}/pod_init.log

- name: Fail if the Init Pod did not complete successfully
  fail: msg="Init Pod crashed :/"
  when: wait_pod_start.stdout == "Init:Error"

- name: Inform about the next task
  debug:
    msg: |
      The next task waits for the completion of the local-ci command '{{ local_ci_run_ci_command }}'
      Watch the progress with this command: oc logs -f {{ local_ci_run_pod_name }} -n {{ local_ci_run_namespace }}

- name: Wait for the main container to finish running
  shell:
    set -o pipefail;
    oc get -f "{{ artifact_extra_logs_dir }}/src/000_pod.yaml"
       --no-headers | awk '{print $3}'
  register: wait_pod_start
  retries: 9999
  delay: 30
  until: wait_pod_start.stdout != "Running"

- name: Create a directory for the test artifacts
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts"
    state: directory
    mode: '0755'
  when: local_ci_run_retrieve_artifacts | bool

- name: Retrieve the test artifacts to the local filesystem
  command:
     oc cp -c artifacts-exporter "{{ local_ci_run_namespace }}/{{ local_ci_run_pod_name }}:/logs" "{{ artifact_extra_logs_dir }}/artifacts/"
  retries: 3
  delay: 0
  failed_when: false
  when: local_ci_run_retrieve_artifacts | bool

- name: Tell the artifacts exporter that the local export is done
  command:
    oc rsh -c artifacts-exporter -n "{{ local_ci_run_namespace }}" "{{ local_ci_run_pod_name }}" touch /tmp/local_export_done
  failed_when: false
  when: local_ci_run_retrieve_artifacts | bool

- name: Wait for the Pod to finish running
  shell:
    set -o pipefail;
    oc get -f "{{ artifact_extra_logs_dir }}/src/000_pod.yaml"
       --no-headers | awk '{print $3}'
  register: wait_pod_start
  retries: 30
  delay: 10
  until: wait_pod_start.stdout not in ["Running", "NotReady"]

- name: Capture the main container logs
  shell:
    set -o pipefail;
    oc logs -n "{{ local_ci_run_namespace }}" "pod/{{ local_ci_run_pod_name }}" -c main
       > {{ artifact_extra_logs_dir }}/pod_main.log

- name: Capture the export container logs
  shell:
    set -o pipefail;
    oc logs -n "{{ local_ci_run_namespace }}" "pod/{{ local_ci_run_pod_name }}" -c artifacts-exporter
       > {{ artifact_extra_logs_dir }}/pod_exporter.log

- name: Get the status of the Pod
  command: oc get -f "{{ artifact_extra_logs_dir }}/src/000_pod.yaml" -ojsonpath={.status.phase}
  register: pod_status
  retries: 30
  delay: 10
  until: pod_status.stdout != "Running"

- name: Fail if the Pod did not complete successfully
  fail: msg="The execution of '{{ local_ci_run_ci_command }}' failed :/. See the logs in {{ artifact_extra_logs_dir }}/pod_main.log"
  when: pod_status.stdout != "Succeeded"
