---
- name: Get the operator version
  block:
  - name: Check if env is available
    shell: echo "$GPU_OPERATOR_VERSION"
    register: gpu_operator_csv_version_cmd
    failed_when: gpu_operator_csv_version_cmd.stdout | length == 0
  rescue:
  - name: Get the gpu-operator subscription package name
    block:
    - name: Count gpu operator subscription candidates
      shell:
        set -o pipefail;
        oc get subscription --all-namespaces -ojson | jq '[.items[] | select(.spec.name | test("gpu-operator"))] | length'
      register: gpu_subscriptions
      failed_when: gpu_subscriptions.stdout != '1'
    - name: Read the package name from the first gpu-operator subscription
      shell:
        set -o pipefail;
        oc get subscription -A -ojson | jq '[.items[] | select(.spec.name | test("gpu-operator"))][0].spec.name'
      register: gpu_operator_subscription_package_name
  - name: Ensure that there is a CSV for the GPU Operator
    command:
      oc get csv
         -oname
         -n {{ gpu_operator_operator_namespace }}
         -loperators.coreos.com/{{ gpu_operator_subscription_package_name.stdout }}.{{ gpu_operator_operator_namespace }}
    register: gpu_operator_csv_name_cmd
    failed_when: gpu_operator_csv_name_cmd.stdout | length == 0

  - name: Get the version from the GPU Operator CSV
    command:
      oc get {{ gpu_operator_csv_name_cmd.stdout }}
         -n {{ gpu_operator_operator_namespace }}
         -ojsonpath={.spec.version}
    register: gpu_operator_csv_version_cmd
    failed_when: gpu_operator_csv_version_cmd.stdout | length == 0

- name: Store the version as an ansible variable '{{ gpu_operator_csv_version_cmd.stdout }}'
  set_fact:
    gpu_operator_version: '{{ gpu_operator_csv_version_cmd.stdout }}'

- name: Store the version as an artifacts file '{{ gpu_operator_csv_version_cmd.stdout }}'
  shell:
    echo '{{ gpu_operator_version }}' > {{ artifact_extra_logs_dir }}/gpu_operator.version
