---
- name: Get the list of DataScienceCluster resources
  command:
    oc get datasciencecluster -n default
  failed_when: false
  register: has_datascience_cluster_cmd

- name: Exit if the Datasciencecluster CRD does not exist
  meta: end_play
  when: has_datascience_cluster_cmd.rc != 0

- name: Show the available components if requested
  when: rhods_update_datasciencecluster_show_all | bool
  command:
    oc explain datasciencecluster.spec.components

- name: Exit if showing the component was requested
  meta: end_play
  when: rhods_update_datasciencecluster_show_all | bool

- name: Set the ODS namespace name
  set_fact:
    ods_namespace: redhat-ods-operator

- name: Get the name of the operator deployment
  command:
    oc get deploy
       -loperators.coreos.com/rhods-operator.redhat-ods-operator
       -oname
       -n "{{ ods_namespace }}"
  register: operator_name_cmd
  failed_when: not operator_name_cmd.stdout

- name: Ensure that the operator exists
  command:
    oc get {{ operator_name_cmd.stdout }}
       -n "{{ ods_namespace }}"

- name: Check if the operator is stopped
  command:
    oc get {{ operator_name_cmd.stdout }}
       -n "{{ ods_namespace }}"
       -ojsonpath={.spec.replicas}
  register: rhods_operator_replicas_cmd

- name: Scale up the operator if it was stopped
  command:
    oc scale {{ operator_name_cmd.stdout }}
       --replicas=1
       -n "{{ ods_namespace }}"
  when: rhods_operator_replicas_cmd.stdout == "0"

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Create the artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts/"
    state: directory
    mode: '0755'

- name: Get the name of the datasciencecluster resource
  shell:
    set -o pipefail;
    oc get datasciencecluster -oname | cut -d/ -f2 | head -1
  register: dscluster_name_cmd
  failed_when: not dscluster_name_cmd.stdout
  when: not rhods_update_datasciencecluster_name

- name: Save the name of the datasciencecluster
  set_fact:
    datasciencecluster_name: "{% if rhods_update_datasciencecluster_name %}{{ rhods_update_datasciencecluster_name }}{% else %}{{ dscluster_name_cmd.stdout_lines[0] }}{% endif %}"

- name: Get the state of the datasciencecluster, if it exists
  shell:
    oc get datasciencecluster/{{ datasciencecluster_name }}
       -oyaml
       --ignore-not-found
       > "{{ artifact_extra_logs_dir }}/artifacts/datascience_cluster_old.yaml"

- name: Get the name of the components
  shell:
    set -o pipefail;
    oc get crd/datascienceclusters.datasciencecluster.opendatahub.io -ojson
     | jq -r ' .spec.versions[0].schema.openAPIV3Schema.properties.spec.properties.components.properties | keys[]'
  register: dsc_components_cmd

- name: Prepare the DataScienceCluster resource
  template:
    src: "{{ datascience_cluster_file }}"
    dest: "{{ artifact_extra_logs_dir }}/src/datascience_cluster.yaml"
    mode: '0700'

- name: Disable the not-wanted components
  shell: |
    set -e;
    {% for component in dsc_components_cmd.stdout_lines %}
    {% if component not in rhods_update_datasciencecluster_enable %}
    yq -yi '.spec.components.{{ component }}.managementState = "Removed"' "{{ artifact_extra_logs_dir }}/src/datascience_cluster.yaml";
    {% endif -%}
    {% endfor %}

- name: Set the DSC extra values
  when: rhods_update_datasciencecluster_extra_settings | length > 0
  shell: |
    set -o pipefail;
    set -e;
    {% for setting_key, setting_value in rhods_update_datasciencecluster_extra_settings.items() %}
    yq -yi --argjson value "$(echo "{{ setting_value }}" | yq)" '.{{ setting_key }} = $value' "{{ artifact_extra_logs_dir }}/src/datascience_cluster.yaml"
    {% endfor %}

- name: Create the DataScienceCluster
  shell: |
    set -e
    oc apply -f "{{ artifact_extra_logs_dir }}/src/datascience_cluster.yaml" --server-side --force-conflicts

- name: Wait for the DataScienceCluster to be ready and capture artifacts
  block:
  - name: Wait for the enabled components to be ready
    shell: |
      # see RHOAIENG-2618 for which is mapping is necessary
      declare -A INSTALLED_COMPONENT_NAME;

      INSTALLED_COMPONENT_NAME["datasciencepipelines"]="data-science-pipelines-operator"

      installed_component_name="${INSTALLED_COMPONENT_NAME['{{ component }}']}"
      if [[ -z "$installed_component_name" ]]; then
        installed_component_name="{{ component }}"
      fi

      oc get datasciencecluster/{{ datasciencecluster_name }} -ojsonpath="{.status.installedComponents.$installed_component_name}"
    register: dscluster_component_status_cmd
    until: dscluster_component_status_cmd.stdout == "true"
    loop: "{{ rhods_update_datasciencecluster_enable }}"
    loop_control:
      loop_var: component
    retries: 60
    delay: 10
  always:
  - name: Capture the DataScienceCluster state
    shell:
      oc get datasciencecluster/{{ datasciencecluster_name }} -oyaml
         > "{{ artifact_extra_logs_dir }}/artifacts/datascience_cluster.yaml"

  - name: Capture the logs of the RHOAI operator
    shell:
      oc logs {{ operator_name_cmd.stdout }}
        -n "{{ ods_namespace }}"
        > "{{ artifact_extra_logs_dir }}/artifacts/operator.log"
