---
- name: Get the names of an existing worker machinesets (of any instance type)
  command:
    oc get machinesets -n openshift-machine-api -o
    jsonpath='{range .items[?(@.spec.template.metadata.labels.machine\.openshift\.io/cluster-api-machine-role=="worker")]}{.metadata.name}{"\n"}{end}'
  register: oc_get_machinesets
  failed_when: not oc_get_machinesets.stdout

- name: "Check if a base machineset is specified: base_machineset={{ cluster_ensure_machineset_base_machineset | default('not set', true) }}"
  set_fact:
    base_machineset: "{{ cluster_ensure_machineset_base_machineset | default(oc_get_machinesets.stdout_lines[0], true) }}"

- name: Ensure that the specified base machineset exists
  fail: msg="Specified base machineset ({{ cluster_ensure_machineset_base_machineset }}) is invalid or does not exist"
  when: base_machineset not in oc_get_machinesets.stdout_lines

- name: Ensure that the base machineset exists
  command: oc get machinesets/{{ base_machineset }} -n openshift-machine-api -oname
  register: machineset_exists
  failed_when: not machineset_exists

- name: Store the MachineSet json definition in a file
  shell:
    oc get 'machineset/{{ base_machineset }}'
       -n openshift-machine-api
       -o json
       > {{ artifact_extra_logs_dir }}/source_machineset.json

- name: Update and store in a file the MachineSet with the requested instance type {{ machineset_instance_type }}
  shell:
    "{{ reconfigure_machineset }}
      {{ artifact_extra_logs_dir }}/source_machineset.json
      {{ machineset_instance_type }}
      {{ machineset_name }}
      {{ machineset_taint }}
      > {{ artifact_extra_logs_dir }}/new_machineset.json"

- name: Update the MachineSet spotMarketOptions spec to be {% if cluster_ensure_machineset_spot %}added{% else %}deleted{% endif %}
  shell:
    set -o pipefail;

    new_machineset_json=$(cat "{{ artifact_extra_logs_dir }}/new_machineset.json");

    jq <<< "$new_machineset_json" > "{{ artifact_extra_logs_dir }}/new_machineset.json"
    {% if cluster_ensure_machineset_spot %}
        '.spec.template.spec.providerSpec.value.spotMarketOptions = {}'
    {% else %}
        'del(.spec.template.spec.providerSpec.value.spotMarketOptions)'
    {% endif %}

- name: Update the EBS disk size
  when: cluster_ensure_machineset_disk_size != None
  shell:
    set -e;
    set -o pipefail;

    new_machineset_json=$(cat "{{ artifact_extra_logs_dir }}/new_machineset.json");

    jq <<< "$new_machineset_json" > "{{ artifact_extra_logs_dir }}/new_machineset.json"
       --arg disk_size {{ cluster_ensure_machineset_disk_size }}
       '.spec.template.spec.providerSpec.value.blockDevices[0].ebs.volumeSize = ($disk_size | tonumber)'

- name: Create/Update the new MachineSet resource
  command: oc apply -f '{{ artifact_extra_logs_dir }}/new_machineset.json'
