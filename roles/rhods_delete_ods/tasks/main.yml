---
- name: Ensure that the operator exists
  command:
    oc get deploy/rhods-operator
       -n "{{ rhods_delete_ods_namespace }}"
       --ignore-not-found
  register: has_rhods_operator_cmd

- name: Check if the operator is stopped
  command:
    oc get deploy/rhods-operator
       -n "{{ rhods_delete_ods_namespace }}"
       -ojsonpath={.spec.replicas}
  register: rhods_operator_replicas_cmd
  when: has_rhods_operator_cmd.stdout

- name: Scale up the operator if it was stopped
  command:
    oc scale deploy/rhods-operator
       --replicas=1
       -n "{{ rhods_delete_ods_namespace }}"
  when: has_rhods_operator_cmd.stdout and rhods_operator_replicas_cmd.stdout == "0"

- name: Wait for the resources to disappear
  include_tasks: delete_resources.yaml
  loop:
  - DataSciencePipelinesApplication
  - InferenceServices
  - ServingRuntime


- name: Get all the ODH/Kubeflow CRDs
  shell:
    set -o pipefail;
    oc get crd -oname | (grep -E 'opendatahub.io|kubeflow.org' || true) | cut -d/ -f2
  register: crd_names_cmd

- name: Delete all the CR {{ item }}
  command:
    oc delete --all "{{ item }}"
       --ignore-not-found
       --timeout=300s
  loop: "{{ crd_names_cmd.stdout_lines }}"

- name: Delete the Dashboard OAuth client
  command:
    oc delete oauthclient.oauth.openshift.io dashboard-oauth-client --ignore-not-found

- name: Delete the operator namespace
  command:
    oc delete ns "{{ rhods_delete_ods_namespace }}"
       --ignore-not-found

- name: Wait for the operand namespaces to disappear
  include_tasks: delete_ns.yaml
  loop:
  - redhat-ods-applications
  - redhat-ods-monitoring
  - rhods-notebooks

- name: Delete the RHODS ClusterRoleBindings and ClusterRole
  shell: |
    set -o pipefail;
    set -x;

    crb=$(oc get ClusterRoleBinding -oname | grep rhods | tr '\n' ' ' || true)
    if [[ "$crb" ]]; then
      oc delete $crb
    fi

    cr=$(oc get ClusterRoleBinding -oname | grep rhods | tr '\n' ' ' || true)
    if [[ "$cr" ]]; then
      oc delete $cr
    fi

- name: Delete all the CRDs {{ item }}
  command:
    oc delete --ignore-not-found "crd/{{ item }}" --timeout=300s
  loop: "{{ crd_names_cmd.stdout_lines }}"
