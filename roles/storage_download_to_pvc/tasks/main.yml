---

- name: Create the src directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src"
    state: directory
    mode: '0755'

- name: Create the artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts"
    state: directory
    mode: '0755'

- name: Store the safe name of the data source
  set_fact:
    data_source_name: "{{ storage_download_to_pvc_name | replace('.', '-') | replace('_', '-') }}"

- name: Store the name of the objects
  set_fact:
    download_name: download-{{ data_source_name | lower }}-to-{{ storage_download_to_pvc_pvc_name | lower }}

- name: Delete the creds secret, if it exists
  command:
    oc delete secret/{{ download_name }}
       -n {{ storage_download_to_pvc_namespace }}
       --ignore-not-found=true
  when: storage_download_to_pvc_creds | length > 0

- name: Create the s3 secret
  command:
    oc create secret generic {{ download_name }}
       -n {{ storage_download_to_pvc_namespace }}
       --from-file=cred={{ storage_download_to_pvc_creds }}
  when: storage_download_to_pvc_creds | length > 0

- name: Create the entrypoint ConfigMap file
  shell:
    oc create cm {{ download_name }}-entrypoint
       --from-file="entrypoint.sh={{ entrypoint }}"
       -n {{ storage_download_to_pvc_namespace }}
       --dry-run=client
       -oyaml
       > {{ artifact_extra_logs_dir }}/src/configmap_entrypoint.yaml

- name: Create the entrypoint ConfigMap resource
  command:
    oc apply -f {{ artifact_extra_logs_dir }}/src/configmap_entrypoint.yaml

- name: Apply the PVC template
  template:
    src: "{{ pvc_template }}"
    dest: "{{ artifact_extra_logs_dir }}/src/pvc.yaml"
    mode: '0400'

- name: Check if the PVC already exists
  command: oc get -f "{{ artifact_extra_logs_dir }}/src/pvc.yaml" -oname
  failed_when: false
  register: has_pvc_cmd

- name: Create a PVC if it does not exist
  when: has_pvc_cmd.rc != 0
  command:
    oc apply -f "{{ artifact_extra_logs_dir }}/src/pvc.yaml"

- name: Check if the PVC has the right access mode
  when: has_pvc_cmd.rc == 0
  command:
    oc get -f "{{ artifact_extra_logs_dir }}/src/pvc.yaml"
       -ojsonpath={.spec.accessModes}
  register: pvc_access_mode_cmd

- name: Show a message if the PVC access mode isn't the expeced one
  debug: msg="Unexpected access mode in the PVC. Found '{{ pvc_access_mode_cmd.stdout }}'. Expected '{{ storage_download_to_pvc_pvc_access_mode }}' "
  when:
  - has_pvc_cmd.rc == 0
  - storage_download_to_pvc_pvc_access_mode not in pvc_access_mode_cmd.stdout

- name: Apply the Pod template
  template:
    src: "{{ pod_template }}"
    dest: "{{ artifact_extra_logs_dir }}/src/pod.yaml"
    mode: '0400'

- name: Delete the Pod, if it exists
  command:
    oc delete -f "{{ artifact_extra_logs_dir }}/src/pod.yaml"
       --ignore-not-found=true

- name: Create a Pod for downloading the dataset
  command:
    oc apply -f "{{ artifact_extra_logs_dir }}/src/pod.yaml"

- name: Wait for the download and delete the secret
  block:
  - name: Wait for the downloader Pod to start
    shell:
      set -o pipefail;

      oc get -f "{{ artifact_extra_logs_dir }}/src/pod.yaml"
         --no-headers
         | awk '{print $3}'
    register: wait_downloader_pod_start_status
    until: "'Pending' not in wait_downloader_pod_start_status.stdout "
    retries: 30
    delay: 10

  - name: Wait for the downloader Pod to terminate
    shell:
      set -o pipefail;

      oc get -f "{{ artifact_extra_logs_dir }}/src/pod.yaml"
         --no-headers
         | awk '{print $3}'

    register: wait_downloader_pod_cmd
    until: "'Completed' in wait_downloader_pod_cmd.stdout
    or 'Failed' in wait_downloader_pod_cmd.stdout
    or 'Error' in wait_downloader_pod_cmd.stdout
    or 'ErrImagePull' in wait_downloader_pod_cmd.stdout
    or 'ImagePullBackOff' in wait_downloader_pod_cmd.stdout
    or not wait_downloader_pod_cmd.stdout"
    retries: 900
    delay: 20
  always:
  - name: Delete the creds secret, if it was created
    command:
      oc delete secret/{{ download_name }}
         -n {{ storage_download_to_pvc_namespace }}
         --ignore-not-found=true
    when: storage_download_to_pvc_creds | length > 0

  - name: Get the logs of the download Pod (debug)
    shell:
      oc logs {{ download_name }}
         -n {{ storage_download_to_pvc_namespace }}
         > {{ artifact_extra_logs_dir }}/artifacts/pod.log
    ignore_errors: true

  - name: Get the description of the download Pod (debug)
    shell:
      oc describe pod/{{ download_name }}
         -n {{ storage_download_to_pvc_namespace }}
         > {{ artifact_extra_logs_dir }}/artifacts/pod.desc
    ignore_errors: true

  - name: Capture the state of the PVC
    shell:
      oc get -f "{{ artifact_extra_logs_dir }}/src/pvc.yaml"
         -oyaml > "{{ artifact_extra_logs_dir }}/artifacts/pvc.yaml"
    ignore_errors: true

- name: Label the PVC if the download succeeded
  when: "'Completed' in wait_downloader_pod_cmd.stdout"
  command:
    oc label pvc/{{ storage_download_to_pvc_pvc_name }}
       -n {{ storage_download_to_pvc_namespace }}
       {{ storage_download_to_pvc_name }}=yes
       --overwrite

- name: Fail if the the downloader Pod failed
  when: "'Completed' not in wait_downloader_pod_cmd.stdout"
  fail: msg="The download failed ({{ wait_downloader_pod_cmd.stdout }})..."
