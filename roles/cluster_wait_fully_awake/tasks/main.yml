---
- name: Create the artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts/before"
    state: directory
    mode: '0755'

- name: Capture the state of the API Services
  shell:
    oc get apiservices > "{{ artifact_extra_logs_dir }}/artifacts/before/api_services.status"

- name: Capture the state of the ClusterOperators
  shell:
    oc get clusteroperators > "{{ artifact_extra_logs_dir }}/artifacts/before/cluster_operators.status"

- name: Show the cluster age
  command:
    oc get clusterversion/version

- name: Compute the cluster age in seconds
  shell:
    set -o pipefail;

    oc get clusterversion/version -ojson | jq '.metadata.creationTimestamp | fromdate - now'
  register: cluster_age_cmd

- name: Approve the CSCR when the cluster has been hibernated (> 3h and <10d)
  # when:
  # - cluster_age_cmd|float|abs > 3*60*60
  # - cluster_age_cmd|float|abs < 10*24*60*60
  block:
  - name: Approve the CSCR
    shell: |
      {{ lookup('file', approve_csrs_file) }}
    register: approved_csr
    until: false
    retries: 3
    delay: 1
    failed_when: false

- name: Wait for the Clusteroperators and APIServices to be available
  block:
  - name: Wait for all the Clusteroperators to be available for more than 5 minutes
    shell: |
      set -o pipefail;

      oc get co -ojson | jq -r -c \
       '.items[]
        | select(.status.conditions[]
        | .type == "Available" and .status == "True")
        | {"lastTransitionTime": (.status.conditions[] | select(.type == "Available" and .status == "True") | .lastTransitionTime),
           "name": .metadata.name}' \
        | sort -n \
        | tail -1 \
        | tee /dev/stderr \
        | jq '.lastTransitionTime | fromdate - now' \
        || true # never let the command fail
    register: lowest_availability_duration_cmd # eg: -183942.29
    until: lowest_availability_duration_cmd.stdout|float|abs > 300
    retries: 45
    delay: 30

  - name: Wait for all the APIServices to be available
    shell:
      set -o pipefail;

      oc get apiservices -ojson | jq -r
      '.items[]
        | select(.status.conditions[] | .type == "Available" and .status == "False")
        | .metadata.name'
        || true # never let the command fail
    register: apiservices_unavailable
    until:
    - not apiservices_unavailable.stdout
    - not apiservices_unavailable.stderr
    retries: 50
    delay: 30

  - name: Wait for all the Clusteroperators to be available for more than 5 minutes
    shell: |
      set -o pipefail;

      oc get co -ojson | jq -r -c \
       '.items[]
        | select(.status.conditions[]
        | .type == "Available" and .status == "True")
        | {"lastTransitionTime": (.status.conditions[] | select(.type == "Available" and .status == "True") | .lastTransitionTime),
           "name": .metadata.name}' \
        | sort -n \
        | tail -1 \
        | tee /dev/stderr \
        | jq '.lastTransitionTime | fromdate - now' \
        || true # never let the command fail
    register: lowest_availability_duration_cmd # eg: -183942.29
    until: lowest_availability_duration_cmd.stdout|float|abs > 300
    retries: 45
    delay: 30

  - name: Ensure that the PackageManifests are available
    shell:
      oc get packagemanifests > "{{ artifact_extra_logs_dir }}/artifacts/package_manifests.status"
    register: has_packagemanifest
    until: has_packagemanifest.rc == 0
    retries: 10
    delay: 30

  - name: Ensure that the Projects are available
    shell:
      oc get projects > "{{ artifact_extra_logs_dir }}/artifacts/projects.status"
    register: has_projects
    until: has_projects.rc == 0
    retries: 10
    delay: 30

  always:
  - name: Capture the state of the ClusterOperators
    shell:
      oc get clusteroperators > "{{ artifact_extra_logs_dir }}/artifacts/cluster_operators.status"

  - name: Capture the state of the APIServices
    shell:
      oc get apiservices > "{{ artifact_extra_logs_dir }}/artifacts/api_services.status"

  - name: Capture the yaml of OpenShift APIServer
    shell:
      oc get Deployment.apps/apiserver -n openshift-apiserver -oyaml > "{{ artifact_extra_logs_dir }}/artifacts/openshift-apiserver.apiserver.yaml"
