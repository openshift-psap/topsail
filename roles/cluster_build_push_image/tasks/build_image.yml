---
- name: Grab local Dockerfile content
  command: cat "{{ cluster_build_push_image_dockerfile_path }}"
  register: dockerfile_content_cmd
  when: not cluster_build_push_image_git_repo

- name: Create BuildConfig from template
  template:
    src: "{{ utils_image_buildconfig }}"
    dest: "{{ artifact_extra_logs_dir }}/src/002_image_buildconfig.yml"
    mode: '0400'

- name: Delete old image BuildConfig if exists
  command:
    oc delete
    -f "{{ artifact_extra_logs_dir }}/src/002_image_buildconfig.yml"
    -n "{{ cluster_build_push_image_namespace }}"
    --ignore-not-found

- name: Apply image BuildConfig
  command:
    oc apply
       -f "{{ artifact_extra_logs_dir }}/src/002_image_buildconfig.yml"
       -n "{{ cluster_build_push_image_namespace }}"
       -ojsonpath={.metadata.name}
  register: buildconfig_name_cmd

- name: Get the name of the build
  shell:
    set -o pipefail;
    oc get builds
       "-lbuildconfig={{ buildconfig_name_cmd.stdout }}"
       -oname
       -n "{{ cluster_build_push_image_namespace }}"
       | cut -d"/" -f2
  register: build_name_cmd
  until: build_name_cmd.stdout | length != 0
  retries: 5
  delay: 10

- name: Await and log image build completion
  block:
  - name: Wait for the Pod to start running
    command:
      oc get "build/{{ build_name_cmd.stdout }}"
          -ojsonpath={.status.phase}
          -n "{{ cluster_build_push_image_namespace }}"
    register: wait_pod_running
    until: "'Running' in wait_pod_running.stdout or 'Failed' in wait_pod_running.stdout or 'Complete' in wait_pod_running.stdout or 'Error' in wait_pod_running.stdout"
    retries: 12
    delay: 15

  - name: Fail if the pod is still pending
    when: "'Pending' in wait_pod_running.stdout"
    fail: msg="The Build could not start. Check 'image-build.descr' to understand what happened. Maybe no Node has enough memory?"

  - name: Wait for the image to be built
    command:
      oc get "build/{{ build_name_cmd.stdout }}"
          -ojsonpath={.status.phase}
          -n "{{ cluster_build_push_image_namespace }}"
    register: wait_img_build
    until: "'Complete' in wait_img_build.stdout or 'Failed' in wait_img_build.stdout or 'Error' in wait_img_build.stdout"
    retries: 40
    delay: 30

  - name: Fail if the image failed to be built
    when: "'Failed' in wait_img_build.stdout"
    fail: msg="The image failed to build"

  - name: Fail if an error occued
    when: "'Error' in wait_img_build.stdout"
    fail: msg="An error occured"

  always:
  - name: Get the build Pod status (debug)
    shell:
      oc get pods
         -l openshift.io/build.name={{ build_name_cmd.stdout }}
         -n "{{ cluster_build_push_image_namespace }}"
         > {{ artifact_extra_logs_dir }}/pod.status

  - name: Get the build Pod description (debug)
    shell:
      oc describe pods
         -l openshift.io/build.name={{ build_name_cmd.stdout }}
         -n "{{ cluster_build_push_image_namespace }}"
         > {{ artifact_extra_logs_dir }}/pod.desc

  - name: Get the build Pod spec (debug)
    shell:
      oc get pods -oyaml
         -l openshift.io/build.name={{ build_name_cmd.stdout }}
         -n "{{ cluster_build_push_image_namespace }}"
         > {{ artifact_extra_logs_dir }}/pod.yaml

  - name: Get the BuildConfig description (debug)
    shell:
      oc describe
         -n "{{ cluster_build_push_image_namespace }}"
         buildconfig/{{ buildconfig_name_cmd.stdout }}
         > {{ artifact_extra_logs_dir }}/buildconfig.desc
    failed_when: false

  - name: Get the BuildConfig definition (debug)
    shell:
      oc get -oyaml
         -n "{{ cluster_build_push_image_namespace }}"
         buildconfig/{{ buildconfig_name_cmd.stdout }}
         > {{ artifact_extra_logs_dir }}/buildconfig.yaml
    failed_when: false

  - name: Store the definition of image build (debug)
    shell:
      oc get -oyaml "build/{{ build_name_cmd.stdout }}"
        -n "{{ cluster_build_push_image_namespace }}"
        > {{ artifact_extra_logs_dir }}/build.yaml
    failed_when: false

  - name: Store the description of image build (debug)
    shell:
      oc describe "build/{{ build_name_cmd.stdout }}"
        -n "{{ cluster_build_push_image_namespace }}"
        > {{ artifact_extra_logs_dir }}/build.desc
    failed_when: false

  - name: Store the logs of image build (debug)
    shell:
      oc logs "build/{{ build_name_cmd.stdout }}"
        --all-containers --prefix
        -n "{{ cluster_build_push_image_namespace }}"
        > {{ artifact_extra_logs_dir }}/build.log
    failed_when: false
