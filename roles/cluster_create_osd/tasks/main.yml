---
- name: Fail if the kubeconfig file is not empty
  shell:
    set -o pipefail;
    test $(cat "{{ cluster_create_osd_kubeconfig }}" | wc -c) == 0

- name: Ensure that following secret file exists {{ cluster_create_osd_secret_file }}
  stat:
    path: "{{ cluster_create_osd_secret_file }}"

- name: Test if the cluster already exists
  command: ocm describe cluster "{{ cluster_create_osd_cluster_name }}"
  register: cluster_exists
  failed_when: false

- name: Create the cluster
  when: "cluster_exists.rc != 0"
  shell:
    source "{{ cluster_create_osd_secret_file }}";
    ocm create cluster "{{ cluster_create_osd_cluster_name }}"
       --version "{{ cluster_create_osd_version }}"
       --region "{{ cluster_create_osd_region }}"
       --ccs
       --aws-account-id "$AWS_ACCOUNT_ID"
       --aws-access-key-id "$AWS_ACCESS_KEY"
       --aws-secret-access-key "$AWS_SECRET_KEY"
       --compute-machine-type "{{ cluster_create_osd_compute_machine_type }}"

- name: Wait for the cluster to be ready
  shell:
    set -o pipefail;
    ocm describe cluster {{ cluster_create_osd_cluster_name }} --json | jq -r .state
  register: ocm_wait_cluster
  retries: 60
  delay: 60
  until: '"ready" in ocm_wait_cluster.stdout'

- name: Delete the htpasswd IDP if it exists
  command:
    ocm delete idp
        --cluster={{ cluster_create_osd_cluster_name }}
        {{ cluster_create_osd_htaccess_idp_name }}
  failed_when: false

- name: Create the htpasswd IDP
  shell:
    source "{{ cluster_create_osd_secret_file }}";
    ocm create idp --cluster={{ cluster_create_osd_cluster_name }}
        --type htpasswd
        --name {{ cluster_create_osd_htaccess_idp_name }}
        --username {{ cluster_create_osd_kubeadmin_name }}
        --password "$KUBEADMIN_PASS"

- name: Delete the kubeadmin user if it exists
  command:
    ocm delete user
        --cluster={{ cluster_create_osd_cluster_name }}
         {{ cluster_create_osd_htaccess_idp_name }}
        --group="{{ cluster_create_osd_kubeadmin_group }}"
  failed_when: false

- name: Create the kubeadmin user
  command:
    ocm create user
        --cluster={{ cluster_create_osd_cluster_name }}
        {{ cluster_create_osd_kubeadmin_name }}
        --group="{{ cluster_create_osd_kubeadmin_group }}"

- name: Get the API URL
  shell:
    set -o pipefail;
    ocm describe cluster {{ cluster_create_osd_cluster_name }} --json | jq -r .api.url
  register: api_url_cmd
  delay: 30
  retries: 10
  until: 'api_url_cmd.stdout and "null" not in api_url_cmd.stdout_lines'

- name: Login into openshift as kubeadmin
  shell:
    source "{{ cluster_create_osd_secret_file }}";
    oc login "{{ api_url_cmd.stdout }}"
             --username={{ cluster_create_osd_kubeadmin_name }}
             --password="$KUBEADMIN_PASS"
             --insecure-skip-tls-verify
  register: oc_login
  delay: 30
  retries: 40
  until: oc_login.rc == 0
  environment:
    KUBECONFIG: "{{ cluster_create_osd_kubeconfig }}"

- name: Wait for the cluster to be fully ready
  block:
  - name: Wait for the OSD cluster to be ready (job/osd-cluster-ready)
    command:
      oc get job/osd-cluster-ready -n openshift-monitoring -ojsonpath={.status.succeeded}
    register: osd_cluster_ready_succeeded
    delay: 30
    retries: 90
    until: 'osd_cluster_ready_succeeded.stdout == "1"'
    environment:
      KUBECONFIG: "{{ cluster_create_osd_kubeconfig }}"

  always:
  - name: Capture the state of the osd-cluster-ready job
    shell: |
      oc logs job/osd-cluster-ready -n openshift-monitoring > "{{ artifact_extra_logs_dir }}/osd-cluster-ready.log"
      oc get job/osd-cluster-ready -n openshift-monitoring > "{{ artifact_extra_logs_dir }}/osd-cluster-ready.status"
    failed_when: false

  - name: Capture the state of the MachineConfigPools
    shell:
      oc get mcp > "{{ artifact_extra_logs_dir }}/mcp.status"

  - name: Capture the state of the Nodes
    shell:
      oc get nodes > "{{ artifact_extra_logs_dir }}/nodes.status"

- name: Set the desired worker node count
  command:
    ocm edit machinepool
             {{ cluster_create_osd_machinepool_name }}
             --cluster={{ cluster_create_osd_cluster_name }}
             --replicas={{ [2, cluster_create_osd_compute_nodes | int] | max }}

- name: Wait for the desired worker node count
  shell: |
    set -o pipefail
    nodes=$(oc get nodes -l node-role.kubernetes.io/worker=,node-role.kubernetes.io/infra!=)
    echo "$nodes" | nl 1>&2 # for observation
    node_count=$(echo "$nodes" | grep "Ready" | wc -l)
    echo "$node_count nodes are ready"
    test "$node_count" -ge "{{ cluster_create_osd_compute_nodes }}"
  register: osd_node_count
  delay: 30
  retries: 40
  until: osd_node_count.rc == 0
