---
- name: Create RHODS namespaces
  shell: |
    set -o pipefail
    oc create ns {{ rhods_namespace }} --dry-run=client -oyaml | oc apply -f-
    oc create ns redhat-ods-applications --dry-run=client -oyaml | oc apply -f-
    oc create ns redhat-ods-monitoring --dry-run=client -oyaml | oc apply -f-

- name: Deploy in ODH mode
  when: rhods_deploy_ods_opendatahub
  set_fact:
    catalog_name: "opendatahub-catalog"

- name: Deploy in managed mode
  when: not rhods_deploy_ods_opendatahub and rhods_deploy_ods_managed_rhoai
  set_fact:
    catalog_name: "addon-managed-odh-catalog"

- name: Deploy in self-managed mode
  when: not rhods_deploy_ods_managed_rhoai and not rhods_deploy_ods_opendatahub
  set_fact:
    catalog_name: "custom-odh-catalog"

- name: Create the src directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src"
    state: directory
    mode: '0755'

- name: Apply the RHODS catalog template
  template:
    src: "{{ rhods_install_ods_catalog }}"
    dest: "{{ artifact_extra_logs_dir }}/src/000_rhods_catalog.yml"
    mode: '0400'

- name: Delete the RHODS catalog if it exists
  command: oc delete -f "{{ artifact_extra_logs_dir }}/src/000_rhods_catalog.yml" --ignore-not-found

- name: Create RHODS catalog
  command: oc create -f "{{ artifact_extra_logs_dir }}/src/000_rhods_catalog.yml"

- name: Create dummy secrets
  when: rhods_deploy_ods_managed_rhoai | bool
  shell: |
    set -o pipefail
    set -e

    oc create ns redhat-ods-monitoring --dry-run=client -oyaml | oc apply -f-

    oc create secret generic redhat-rhods-deadmanssnitch -n redhat-ods-monitoring \
               --from-literal="SNITCH_URL=https://nosnch.in/c2354d53d2" \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic redhat-rhods-pagerduty -n redhat-ods-monitoring \
               --from-literal=PAGERDUTY_KEY=not-a-key \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic addon-managed-odh-parameters -n redhat-ods-operator \
               --from-literal=notification-email=not-an-email@local.com \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic redhat-rhods-smtp -n redhat-ods-monitoring \
               --from-literal=host=dummy.svc \
               --from-literal=port=1234 \
               --from-literal=username=USERNAME \
               --from-literal=password=PASSWORD \
               -oyaml --dry-run=client \
               | oc apply -f-


- name: Test if the RHODS operator is installed
  command:
     oc get subscription.operators.coreos.com -A -oname
       -loperators.coreos.com/{{ rhods_manifest_name }}.openshift-operators
  failed_when: false
  register: has_rhods_operator_cmd

- name: Install RHODS operator
  when: not has_rhods_operator_cmd.stdout
  include_role:
    name: cluster_deploy_operator
  vars:
    cluster_deploy_operator_catalog: "{{ catalog_name }}"
    cluster_deploy_operator_manifest_name: "{{ rhods_manifest_name }}"
    cluster_deploy_operator_namespace: "{{ rhods_namespace }}"
    cluster_deploy_operator_all_namespaces: "True"
    cluster_deploy_operator_catalog_namespace: "{{ rhods_namespace }}"
    cluster_deploy_operator_channel: "{{ rhods_deploy_ods_channel }}"
    cluster_deploy_operator_version: "{{ rhods_deploy_ods_version }}"
    cluster_deploy_operator_config_env_names: "[{% if rhods_deploy_ods_disable_dsc_config %}\"DISABLE_DSC_CONFIG\"{% endif %}]"
    cluster_deploy_operator_csv_base_name: "{% if rhods_deploy_ods_opendatahub %}opendatahub-operator{% endif %}"

- name: Wait for the DataScienceCluster resource to be created
  command:
    oc get datasciencecluster -oname
  register: has_datasciencecluster_cmd
  until: has_datasciencecluster_cmd.stdout
  retries: 60
  delay: 10
  when: rhods_deploy_ods_managed_rhoai | bool

- name: Wait for the DSCI resource to be created
  command:
    oc get DSCInitialization -oname
  register: has_dsci_cmd
  until: has_dsci_cmd.stdout
  retries: 60
  delay: 10

- name: Patch the DSCI to make ODH look like RHOAI
  shell: |
    set -e;

    oc patch {{ has_dsci_cmd.stdout }} --patch {% raw %}'{"spec": {"applicationsNamespace": "redhat-ods-applications"}}'{% endraw %} --type merge
    oc patch {{ has_dsci_cmd.stdout }} --patch {% raw %}'{"spec": {"monitoring": {"namespace": "redhat-ods-monitoring"}}}'{% endraw %} --type merge
  when: rhods_deploy_ods_opendatahub | bool

- name: Patch the DSCI to make Self-Managed look like RHOAI-Managed
  shell: |
    oc patch {{ has_dsci_cmd.stdout }} --patch {% raw %}'{"spec": {"monitoring": {"managementState": "Managed"}}}'{% endraw %} --type merge

  when: not rhods_deploy_ods_managed_rhoai
