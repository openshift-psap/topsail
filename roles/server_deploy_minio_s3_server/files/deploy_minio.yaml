apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
      - name: data-dir
        emptyDir: {}
      - name: artifacts-dir
        emptyDir: {}
      - name: empty-bin-dir
        emptyDir: {}
      - name: cabundle
        configMap:
          # Automatically created in every ocp namespace
          name: openshift-service-ca.crt
          items:
          - key: service-ca.crt
            path: public.crt
          defaultMode: 420
      - name: minio-certs
        secret:
          secretName: minio-certs
          items:
          - key: tls.crt
            path: public.crt
          - key: tls.key
            path: private.key
          defaultMode: 420
      containers:
      - name: minio
        image: quay.io/minio/minio:RELEASE.2025-01-20T14-49-07Z
        args:
        - server
        - /data
        - '--certs-dir'
        - /mnt/minio-certs
        - --console-address=:9001
        - --anonymous
        ports:
        - containerPort: 9000
        - containerPort: 9001
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: data-dir
          mountPath: /data
        - name: minio-certs
          mountPath: /mnt/minio-certs
        - name: cabundle
          mountPath: /mnt/minio-certs/CAs
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_ROOT_USER
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio
              key: MINIO_ROOT_PASSWORD
      - name: ubi8 # this container is used to export data out of the container, with tar/oc cp
        image: quay.io/centos/centos:stream9
        command: [bash, -c]
        args:
        - |
          set -o errexit
          set -o pipefail
          set -o nounset
          set -o errtrace
          set -x
          cd /usr/local/bin
          curl -Ssf "$RSYNC_RPM_URL" | rpm2archive | tar xz ./usr/bin/rsync --strip-components=3
          sleep inf
        env:
        - name: RSYNC_RPM_URL
          value: "https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/rsync-3.2.3-20.el9.x86_64.rpm"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: artifacts-dir
          mountPath: /artifacts
        - name: empty-bin-dir
          mountPath: /usr/local/bin
      - name: mc
        image: quay.io/minio/mc:RELEASE.2025-01-17T23-25-50Z
        command: [bash, -cxe]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: artifacts-dir
          mountPath: /artifacts
        args:
        - |
          echo "Waiting for Minio server to launch ..."

           while true; do
             curl -sSf -k "$MINIO_SERVER_ADDR" > /dev/null || retcode=$?

            [[ $retcode != 7 ]] && break
            sleep 5 # Connection refused, server not ready
          done
          echo "Minio is running, configuring it ..."

           _mc() {
             mc --config-dir /tmp --insecure "$@"
           }
           MINIO_SERVER_NAME=minio
           # using 'bash -c' so that the secrets don't get printed by 'set -x'

          # create a local server alias
          bash -c 'echo -e "$MINIO_ROOT_USER\n$MINIO_ROOT_PASSWORD"' \
             | _mc alias set "$MINIO_SERVER_NAME" "$MINIO_SERVER_ADDR"

          # create a user in the server
          bash -c 'echo -e "$MINIO_S3_ACCESS_KEY\n$MINIO_S3_SECRET_KEY"' \
             | _mc admin user add "$MINIO_SERVER_NAME"

          # give privileges to the user
          _mc admin policy attach "$MINIO_SERVER_NAME" consoleAdmin --user "$MINIO_S3_ACCESS_KEY"

          # create default bucket
          _mc mb "minio/$MINIO_S3_BUCKET_NAME"

          echo "All done, Minio is configured!"
          sleep +inf
        env:
        - name: MINIO_SERVER_ADDR
          value: https://localhost:9000

        - name: MINIO_ROOT_USER
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_ROOT_USER

        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio
              key: MINIO_ROOT_PASSWORD

        - name: MINIO_S3_ACCESS_KEY
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_S3_ACCESS_KEY

        - name: MINIO_S3_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: minio
              key: MINIO_S3_BUCKET_NAME

        - name: MINIO_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio
              key: MINIO_S3_SECRET_KEY
---
kind: Service
apiVersion: v1
metadata:
  name: minio
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: minio-certs
spec:
  ports:
  - name: https
    protocol: TCP
    port: 9000
    targetPort: 9000
  - name: console
    protocol: TCP
    port: 9001
    targetPort: 9001
  selector:
    app: minio

---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: minio-secure
spec:
  to:
    kind: Service
    name: minio
    weight: 100
  port:
    targetPort: https
  tls:
    termination: reencrypt
    insecureEdgeTerminationPolicy: Redirect
