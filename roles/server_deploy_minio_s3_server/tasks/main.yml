---
- name: Ensure that the secret properties file exists
  stat:
    path: "{{ server_deploy_minio_s3_server_secret_properties_file }}"

- name: Create minio namespace
  shell:
    set -o pipefail;
    oc create ns "{{ server_deploy_minio_s3_server_namespace }}" -oyaml --dry-run=client | oc apply -f-

- name: Delete minio ConfigMap, if it exists
  command:
    oc delete cm/minio
       --ignore-not-found
       -n "{{ server_deploy_minio_s3_server_namespace }}"

- name: Create minio ConfigMap
  command:
    oc create cm minio
       -n "{{ server_deploy_minio_s3_server_namespace }}"
       --from-literal=MINIO_ROOT_USER={{ server_deploy_minio_s3_server_root_user }}
       --from-literal=MINIO_S3_ACCESS_KEY={{ server_deploy_minio_s3_server_access_key }}
       --from-literal=MINIO_S3_BUCKET_NAME={{ server_deploy_minio_s3_server_bucket_name }}
- name: Delete minio secret, if it exists
  command: oc delete secret/minio --ignore-not-found -n "{{ server_deploy_minio_s3_server_namespace }}"

- name: Create minio Secret
  shell:
    set -o pipefail;
    set -e;
    SECRET_KEY=$(cat "{{ server_deploy_minio_s3_server_secret_properties_file }}" | grep user_password | cut -d= -f2);
    ADMIN_PASSWORD=$(cat "{{ server_deploy_minio_s3_server_secret_properties_file }}" | grep admin_password | cut -d= -f2);
    oc create secret generic minio
       -n "{{ server_deploy_minio_s3_server_namespace }}"
       "--from-literal=MINIO_ROOT_PASSWORD=$ADMIN_PASSWORD"
       "--from-literal=MINIO_S3_ACCESS_KEY=minio"
       "--from-literal=MINIO_S3_SECRET_KEY=$SECRET_KEY"
- name: Delete minio deployment, if it exists
  command:
    oc delete
       -f "{{ server_deploy_minio_s3_server_deployment }}"
       --ignore-not-found
       -n "{{ server_deploy_minio_s3_server_namespace }}"

- name: Create the minio deployment
  command:
    oc create
       -f "{{ server_deploy_minio_s3_server_deployment }}"
       -n "{{ server_deploy_minio_s3_server_namespace }}"

- name: Wait for the minio deployment to be ready
  block:
  - name: Wait for the minio deployment to be ready
    command:
      oc get deploy/minio-deployment
         -oyaml
         -n "{{ server_deploy_minio_s3_server_namespace }}"
         -ojsonpath={.status.readyReplicas}
    register: wait_minio_ready
    retries: 12
    delay: 30
    until: wait_minio_ready.stdout
  always:
  - name: Capture the state of the minio Deployment
    shell:
      oc get deploy/minio-deployment
          -n "{{ server_deploy_minio_s3_server_namespace }}"
         > "{{ artifact_extra_logs_dir }}/deploy.status"

  - name: Capture the state of the minio Pod
    shell:
      oc get pods -lapp=minio
             -n "{{ server_deploy_minio_s3_server_namespace }}"
             > "{{ artifact_extra_logs_dir }}/pod.status"
  - name: Capture the descr of the minio Pod
    shell:
      oc describe pods -lapp=minio
             -n "{{ server_deploy_minio_s3_server_namespace }}"
             > "{{ artifact_extra_logs_dir }}/pod.descr"
