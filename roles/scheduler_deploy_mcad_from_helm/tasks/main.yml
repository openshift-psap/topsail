---
- name: Install helm
  shell: |
    set -o pipefail
    set -e
    set -x

    VERSION=v3.13.1
    ARCH=linux-amd64
    cd /tmp
    curl -Ssf https://get.helm.sh/helm-$VERSION-$ARCH.tar.gz | gunzip - | tar xv $ARCH/helm
    mv $ARCH/helm /tmp/helm
    rmdir $ARCH

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Create the artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts/"
    state: directory
    mode: '0755'

- name: Create the namespace if it does not exist
  command:
    oc create ns "{{ scheduler_deploy_mcad_from_helm_namespace }}"
  failed_when: false

- name: Clone MCAD directory
  shell: |
    cd /tmp
    git clone --quiet "{{ scheduler_deploy_mcad_from_helm_git_repo }}" -b "{{ scheduler_deploy_mcad_from_helm_git_ref }}" mcad
    cd mcad
    git show --quiet > "{{ artifact_extra_logs_dir }}/artifacts/git.commit"

- name: Save the CRDs in the src artifacts
  command:
    cp -rv /tmp/mcad/deployment/mcad-controller/crds "{{ artifact_extra_logs_dir }}/src/"

- name: Create the CRDs
  command:
    oc apply -f /tmp/mcad/deployment/mcad-controller/crds

- name: Generate the helm template
  shell:
    set -o pipefail;
    set -e;
    cd /tmp/mcad/deployment;
    /tmp/helm install main mcad-controller
         --namespace "{{ scheduler_deploy_mcad_from_helm_namespace }}"
         --set image.repository="{{ scheduler_deploy_mcad_from_helm_image_repo }}"
         --set image.tag="{{ scheduler_deploy_mcad_from_helm_image_tag }}"
         --dry-run -ojson
         | jq -r .manifest
         > "{{ artifact_extra_logs_dir }}/src/resources.yaml"

- name: Workaround | transform the helm resources to match ODH deployment
  shell:
    set -o pipefail;

    cat "{{ artifact_extra_logs_dir }}/src/resources.yaml"
      | yq  'if(.kind == "Deployment") then (
               .metadata.name = "mcad-controller-mcad" |
               .metadata.labels.app = "mcad-mcad" |
               .spec.selector.matchLabels.app = "mcad-mcad" |
               .spec.template.metadata.labels.app = "mcad-mcad"
             ) else .
             end
           | if(.metadata.namespace == "kube-system") then
               .metadata.namespace = "opendatahub"
             else .
             end
           | if(.kind == "ClusterRoleBinding") then
               .subjects[0].namespace = "opendatahub"
             else .
             end
          '
      > "{{ artifact_extra_logs_dir }}/src/odh-like-resources.json"


- name: Apply the helm template
  command:
    oc apply -f "{{ artifact_extra_logs_dir }}/src/odh-like-resources.json"
