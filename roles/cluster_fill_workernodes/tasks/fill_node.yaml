- name: Get the description of the node before fill it
  shell:
    oc describe node {{ node_name }} > "{{ artifact_extra_logs_dir }}/node_{{ node_name }}.before.desc"

- name: Get the node allocatable amount of CPU on node {{ node_name }}
  command:
    oc get node {{ node_name }} -ojsonpath={.status.allocatable.cpu}
  register: allocatable_cpu_cmd

- name: Get the available amount of CPU on node {{ node_name }}
  shell:
    set -o pipefail;
    oc describe node {{ node_name }} | grep 'Allocated resources' -A4 | grep cpu | awk '{ print $2 }'
  register: allocated_cpu_cmd

- name: Compute the amount of CPU to request
  shell: |
    python3 <<EOF
    allocatable_cpu_lines = "{{ allocatable_cpu_cmd.stdout }}"
    allocatable_cpu = int(allocatable_cpu_lines.strip("m"))

    allocated_cpu_lines = "{{ allocated_cpu_cmd.stdout }}"
    if allocated_cpu_lines.endswith("m"):
      allocated_cpu = int(allocated_cpu_lines.strip("m"))
    else:
      allocated_cpu = int(allocated_cpu_lines) * 1000

    requests_cpu = allocatable_cpu - allocated_cpu - 10
    print(f"{requests_cpu:.0f}m")
    EOF
  register: cpu_request_value_cmd

- name: Get the node allocatable amount of memory on node {{ node_name }}
  command:
    oc get node {{ node_name }} -ojsonpath={.status.allocatable.memory}
  register: allocatable_mem_cmd

- name: Get the available amount of memory on node {{ node_name }}
  shell:
    set -o pipefail;
    oc describe node {{ node_name }} | grep 'Allocated resources' -A5 | grep memory | awk '{ print $2 }'
  register: allocated_mem_cmd

- name: Compute the amount of memory to request
  shell: |
    python3 <<EOF
    allocatable_mem_lines = "{{ allocatable_mem_cmd.stdout }}"
    allocatable_mem = int(allocatable_mem_lines.strip("Ki")) / 1024

    allocated_mem_lines = "{{ allocated_mem_cmd.stdout }}"
    if allocated_mem_lines.endswith("Mi"):
      allocated_mem = int(allocated_mem_lines.strip("Mi"))
    elif allocated_mem_lines.endswith("Ki"):
      allocated_mem = int(allocated_mem_lines.strip("Ki")) / 1024
    else:
      allocated_mem = int(allocated_mem_lines) / 1024 / 1024

    requests_mem = allocatable_mem - allocated_mem - 200 #Mi
    print(f"{requests_mem:.0f}Mi")
    EOF
  register: mem_request_value_cmd

- name: Set the variables
  set_fact:
    cpu_request_value: "{{ cpu_request_value_cmd.stdout }}"
    mem_request_value: "{{ mem_request_value_cmd.stdout }}"

- name: Create the Pod definition
  template:
    src: "{{ cluster_fill_workernodes_pod_template }}"
    dest: "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
    mode: '0400'

- name: Check if the Pod already exists
  command:
    oc get -f "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
       --ignore-not-found
       -oname
  failed_when: false
  register: has_placeholder_pod

- name: Set a flag if the Pod already exists
  command:
    touch "{{ artifact_extra_logs_dir }}/{{ node_name }}_ALREADY_EXISTS"
  when: has_placeholder_pod.stdout | length > 0

- name: Apply the Pod definition
  command:
    oc apply -f "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
  when: not has_placeholder_pod.stdout

- name: Wait for the placeholder Pod to start running
  block:
  - name: Wait for the placeholder Pod to start running
    shell:
      set -o pipefail;
      oc get -f "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
         -o custom-columns=:.status.phase
         --no-headers
    register: pod_status_wait
    until: pod_status_wait.stdout == "Succeeded" or pod_status_wait.stdout == "Error" or pod_status_wait.stdout == "Failed" or pod_status_wait.stdout == "Running"
    retries: 20
    delay: 10
    failed_when: pod_status_wait.stdout == "Error" or pod_status_wait.stdout == "Failed" or pod_status_wait.stdout == "Pending"
  always:
  - name: Save the placeholder Pod status
    shell:
      oc get -f "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
         > "{{ artifact_extra_logs_dir }}/pod_placeholder_{{ node_name }}.status"

  - name: Save the placeholder Pod YAML
    shell:
      oc get -oyaml -f "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
         > "{{ artifact_extra_logs_dir }}/pod_placeholder_{{ node_name }}.yaml"

  - name: Save the placeholder Pod description
    shell:
      oc describe -f "{{ artifact_extra_logs_dir }}/src/pod_placeholder_{{ node_name }}.yaml"
         > "{{ artifact_extra_logs_dir }}/pod_placeholder_{{ node_name }}.desc"

  - name: Get the available amount of CPU on node {{ node_name }}
    shell:
      set -o pipefail;
      oc describe node {{ node_name }} | grep 'Allocated resources' -A4 | grep cpu | awk '{ print $2 }'

  - name: Get the available amount of memory on node {{ node_name }}
    shell:
      set -o pipefail;
      oc describe node {{ node_name }} | grep 'Allocated resources' -A5 | grep memory | awk '{ print $2 }'

  - name: Get the description of the node after fill it
    shell:
      oc describe node {{ node_name }} > "{{ artifact_extra_logs_dir }}/node_{{ node_name }}.after.desc"
