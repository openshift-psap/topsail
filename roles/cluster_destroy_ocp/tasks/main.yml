---
- name: Fail if the tag key is empty
  fail: msg="Tag cannot be empty, or pass the --confirm flag."
  when:
  - not cluster_destroy_ocp_tag
  - not cluster_destroy_ocp_confirm|bool

- name: Fail if the tag value is empty
  fail: msg="Tag value is empty"
  when: not cluster_destroy_ocp_tag_value

- name: Fail if the region is empty
  fail: msg="region cannot be empty, or pass the --confirm flag."
  when:
  - not cluster_destroy_ocp_region
  - not cluster_destroy_ocp_confirm|bool

- name: Get the cluster region
  when: not cluster_destroy_ocp_region
  command: oc get machines -n openshift-machine-api -ojsonpath={.items[0].spec.providerSpec.value.placement.region}
  register: cluster_region_cmd

- name: Get the cluster tag
  when: not cluster_destroy_ocp_tag
  shell:
    set -o pipefail;
    oc get machines -n openshift-machine-api -ojsonpath={.items[0].spec.providerSpec.value.tags[0].name} \
        | cut -d/ -f3
  register: cluster_tag_cmd

- name: Set the cluster tag and region
  set_fact:
    cluster_tag: "{{ cluster_destroy_ocp_tag | default(cluster_tag_cmd.stdout, true) }}"
    cluster_region: "{{ cluster_destroy_ocp_region | default(cluster_region_cmd.stdout, true) }}"

- name: Create openshift-install metadata.json
  template:
    src: "{{ cluster_destroy_ocp_metadata_json }}"
    dest: "{{ artifact_extra_logs_dir }}/metadata.json"
    mode: '0400'

- name: Show metadata.json (debug)
  command:
    cat "{{ artifact_extra_logs_dir }}/metadata.json"

- name: Get the path of the openshift-install
  shell: |
    set -o pipefail;
    installer=$(which "{{ cluster_destroy_ocp_openshift_install }}" 2>/dev/null)
    if [[ "$installer" ]]; then
      echo "$installer"
      exit 0
    fi
    ls projects/cluster/subprojects/deploy-cluster/utils/installers/*/openshift-install | head -1
  register: openshift_install_cmd

- name: Trigger openshift-install cluster deletion
  command: |
    {{ openshift_install_cmd.stdout }}
      destroy cluster
        --dir "{{ artifact_extra_logs_dir }}"
        --log-level=debug
