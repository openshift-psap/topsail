#! /usr/bin/env bash
#
# This file serves as entrypoint to the CI testing

set -o pipefail
set -o errexit
set -o nounset

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

if [[ "${JOB_NAME:-}" == *"jump-ci" && "${TOPSAIL_JUMP_CI_INSIDE_JUMP_HOST:-}" != true ]]; then
    TOPSAIL_JUMP_CI_OUTSIDE_JUMP_HOST=true
fi

needs_cluster_access=true
if [[ "${TOPSAIL_LIGHT_IMAGE:-}" == true ]] \
       || [[ "${TOPSAIL_JUMP_CI_OUTSIDE_JUMP_HOST:-}" == true ]] \
       || [[ -z "${KUBECONFIG:-}" ]] \
       || grep -q "NOT A KUBECONFIG" "$KUBECONFIG";
then
    echo "Cluster access not needed. Disabling the access verifications."
    needs_cluster_access=false
fi

save_run_logs() {
    LOG_FILE=$ARTIFACT_DIR/run.log
    if [[ -f "$LOG_FILE" ]]; then
        mkdir -p "$ARTIFACT_DIR/_WARNING"
        msg="WARNING: run: log file $LOG_FILE already exists"
        echo $msg | tee -a "$ARTIFACT_DIR/_WARNING/msg"

    fi
    exec &> >(tee -a "$LOG_FILE")
}

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    echo ""
    if [ "${INSIDE_CI_IMAGE:-}" == "y" ]; then
        if [[ "${PULL_BASE_SHA:-}" && "${PULL_PULL_SHA:-}" ]]; then
            git show --quiet --oneline ${PULL_BASE_SHA:-}..${PULL_PULL_SHA:-} 2>/dev/null \
                || echo "WARNING: Could not access git history (${PULL_BASE_SHA:-}..${PULL_PULL_SHA:-}) ..."
        else
            echo "WARNING: PULL_BASE_SHA=${PULL_BASE_SHA:-} and/or PULL_PULL_SHA=${PULL_PULL_SHA:-} not set. Showing the commits from main."
            git show --quiet --oneline main.. \
                || echo "WARNING: Could not access git history (main..) ..."
        fi
    fi
}

precheck_artifact_dir() {
    if [ -z "${ARTIFACT_DIR:-}" ]; then
        if [[ "${OPENSHIFT_CI:-}" == true ]]; then
            echo "ARTIFACT_DIR not set, cannot proceed without it in OpenShift CI."
            false
            exit 1
        elif [[ "${PERFLAB_CI:-}" == true ]]; then
            echo "ARTIFACT_DIR not set, cannot proceed without it in PerfLab CI."
            false
            exit 1
        else
            echo "ARTIFACT_DIR not set, but not running in a CI. Creating a directory for it ..."
        fi

        export ARTIFACT_DIR="/tmp/topsail_$(date +%Y%m%d)"
        mkdir -p "$ARTIFACT_DIR"

        echo "Using ARTIFACT_DIR=$ARTIFACT_DIR as default artifacts directory."
    else
        echo "Using ARTIFACT_DIR=$ARTIFACT_DIR."
    fi
}

prechecks() {
    if [ -e "$ARTIFACT_DIR/FAILURES" ]; then
        echo "File '$ARTIFACT_DIR/FAILURES' already exists, cannot continue."
        false
        exit 1
    fi

    if [[ "${TOPSAIL_LOCAL_CI:-}" == true && "${TOPSAIL_LOCAL_CI_MULTI:-}" != true ]]; then
        LOCAL_CI_NAMESPACE=topsail
        echo "Checking for local-ci Pods running in the cluster ..."
        if oc get pods --field-selector=status.phase==Running -oname -n "$LOCAL_CI_NAMESPACE" | grep .; then
            msg="ERROR: run: a pod is running in the local-ci namespace ($LOCAL_CI_NAMESPACE), aborting."
            echo $msg | tee -a "$ARTIFACT_DIR/_ERROR"
            oc get pods -n "$LOCAL_CI_NAMESPACE" | tee -a "$ARTIFACT_DIR/_ERROR"
            false
            exit 1
        fi
    fi

    if [[ "${OPENSHIFT_CI:-}" == true && "${TOPSAIL_LOCAL_CI_MULTI:-}" != true && "${TOPSAIL_JUMP_CI_INSIDE_JUMP_HOST:-}" != true ]]; then
        DEST="${ARTIFACT_DIR}/variable_overrides.yaml"
        "$THIS_DIR/utils/openshift_ci/pr_args.sh" "$DEST"
        if [[ -f "$DEST" ]]; then
            echo "Variables overridden from PR:"
            cat "$DEST"
            echo "---"
        fi

        if [[ -z "${TOPSAIL_OPENSHIFT_CI_STEP_DIR:-}" ]]; then
            export TOPSAIL_OPENSHIFT_CI_STEP_DIR="${HOSTNAME/$JOB_NAME_SAFE-/}/artifacts"
        fi
    fi

    if [[ "$needs_cluster_access" == true ]]; then
        if ! which oc &>/dev/null;
        then
            echo "oc not found, this is unexpected in the CI image. Can't continue."
            false
        fi

        if ! oc version 2>/dev/null; then
            if [[ -z "${KUBECONFIG:-}" ]]
            then
                echo "KUBECONFIG not set, cannot continue."
                false
            fi
            if [[ ! -e "${KUBECONFIG}" ]]
            then
                echo "KUBECONFIG file doesn't exist, can't continue. (KUBECONFIG=${KUBECONFIG})"
                false
            fi
            echo "Using KUBECONFIG=${KUBECONFIG}"
        fi
    fi

    if ! which jq &>/dev/null;
    then
        echo "jq not found. Can't continue."
        false
    fi

    # avoid incorrect error reporting (mostly for outside of CI)
    rm -f "${ARTIFACT_DIR}/FAILURE"

    # store `topsail` version in use
    echo "Saving TOPSAIL git version into ${ARTIFACT_DIR}/topsail.git_version"
    (git describe HEAD --long --always || echo "git missing") > ${ARTIFACT_DIR}/topsail.git_version
    # store `matrix-benchmarking` version in use
    (git -C "$THIS_DIR/../projects/matrix_benchmarking/subproject/" describe HEAD --long --always || echo "git missing") > ${ARTIFACT_DIR}/matbench.git_version

    if [[ "${PULL_NUMBER:-}" ]]; then
        PR_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PULL_NUMBER"
        PR_COMMENTS_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$PULL_NUMBER/comments"

        curl -sSf "$PR_URL" -o "${ARTIFACT_DIR}/pull_request.json" || echo "WARNING: Failed to download the PR from $PR_URL"
        curl -sSf "$PR_COMMENTS_URL" -o "${ARTIFACT_DIR}/pull_request-comments.json" || echo "WARNING: Failed to download the PR comments from $PR_COMMENTS_URL"
    fi

    if [[ "${needs_cluster_access}" == true ]]; then
        # check that the OCP cluster can be reached
        ocp_version=$(oc version -o json | jq --raw-output '.openshiftVersion' || true)
        if [[ -z "$ocp_version" ]]; then
            echo "Cluster cannot be accessed. Can't continue."
            false
        fi

        # store the OCP version of the cluster
        echo "$ocp_version" > ${ARTIFACT_DIR}/ocp.version
    fi
}

postchecks() {
    reason=$1
    shift

    if [[ "$reason" == ERR ]]; then
        find "$ARTIFACT_DIR" -name FAILURE | sort | xargs -I% bash -c "(echo -n '% | '  ; cat %)" \; > "$ARTIFACT_DIR/FAILURES"
        touch "$ARTIFACT_DIR/FAILURES"

        if [[ "${needs_cluster_access}" == true ]]; then
            if ! oc version >/dev/null 2>&1; then
                mkdir -p "$ARTIFACT_DIR/_FLAKE"
                echo "Cluster unreachable" >> "$ARTIFACT_DIR/_FLAKE/cluster_unreachable"
            fi
        fi

        return
    elif [[ "$reason" != EXIT ]]; then
        echo "postchecks: unhandled exit reason: $reason" # shouldn't happen unless a new `trap` is added

        return
    fi

    # reason == EXIT, we're at the end of the script execution
    if [[ "${TOPSAIL_LOCAL_CI_MULTI:-}" != true ]]; then
        testing/utils/generate_plot_index.py > "$ARTIFACT_DIR/reports_index.html" || true
        # don't keep it if empty
        [[ -s  "$ARTIFACT_DIR/reports_index.html" ]] || rm "$ARTIFACT_DIR/reports_index.html"
        echo ""
    fi

    if [[ "${start_time:-}" ]]; then
        local end_time=$(date +%s)
        local duration_seconds=$((end_time - start_time))
        duration="after $(date -d "1970-01-01 + $duration_seconds seconds" "+%H hours %M minutes %S seconds")"
    else
        duration="(start_time missing :/)"
    fi
    if [ ! -e "$ARTIFACT_DIR/FAILURES" ]; then
        status="Test of '$@' succeeded $duration."
    else
        status="Test of '$@' failed $duration."
        reason=ERR
    fi
    echo "$(date) $status" | tee "$ARTIFACT_DIR/FINISHED"

    if [[ "$reason" == ERR || "${3:-}" == "test_ci" || "${3:-}" == "generate_plots_from_pr_args" ]]; then
        if [[ "${OPENSHIFT_CI:-}" == true || "${PERFLAB_CI:-}" == true || "${TOPSAIL_LOCAL_CI:-}" == true ]] \
               && [[ "${TOPSAIL_JUMP_CI_OUTSIDE_JUMP_HOST:-}" != true ]];
        then
            log_file="$ARTIFACT_DIR/send_job_completion_notification.log"
            ./run_toolbox.py repo send_job_completion_notification "$reason" "$status" 2> "$log_file" || true
            # don't keep it if empty
            [[ -s  "$log_file" ]] || rm "$log_file"
        fi
    fi
}

list_available() {
    target_entrypoint_dir=${1:-}
    shift || true
    target_entrypoint_file=${1:-}

    fmt() {
        sed 's/.sh$//g' | sed 's/^/- /'
    }
    if [[ -f "$target_entrypoint_file" ]]; then
        echo "$target_entrypoint_file is an entrypoint."

    elif [[ -d "$target_entrypoint_dir" ]]; then
        echo "Available '$(basename $target_entrypoint_dir)' entrypoint points:"
        ls "$target_entrypoint_dir" | fmt
    else
        echo "Available base entrypoint points:"
        ls "$THIS_DIR" | grep -v '^run$' | fmt
    fi
}

##############

if [[ "${INSIDE_RUN:-}" != "y" ]]; then
    precheck_artifact_dir
    save_run_logs
    ci_banner "$@"
    prechecks
    echo

    trap "postchecks EXIT $*" EXIT
    trap "postchecks ERR" ERR

    export INSIDE_RUN=y
fi

#############

echo "$(date) Test of '$@' started." | tee "$ARTIFACT_DIR/STARTED"
start_time=$(date +%s)

if [[ -z "${1:-}" ]]; then
    echo
    echo "FATAL: No entrypoint provided ..."
    echo
    list_available

    false
    exit 1
fi

target="${1}"
shift
second_target="${1:-}"

# Note: do not 'exec' into the entrypoint, so that 'postchecks' can be
# executed on exit.

term_kill_needed="hell"
term_child_pid=""
wait_term() {
    # not sure why this is needed, but without it the ERR trap isn't executed as it should ...
    trap "postchecks ERR" ERR

    term_child_pid=$!
    if [ "${term_kill_needed:-}" ]; then
        echo "run: child PID known wait_term handler. Forwarning the signal to ${target} ..."
        kill -${term_kill_needed} "${term_child_pid}" 2>/dev/null
    fi
    echo "run: waiting for the child process $$..."
    wait ${term_child_pid} 2>/dev/null
    trap - TERM INT

    wait ${term_child_pid} 2>/dev/null
}

handle_term() {
    sig=$1
    echo "run: handle_term: signal $sig received."
    if [ "${term_child_pid}" ]; then
        echo "run: handle_term: forwarding it to ${target} ..."
        kill -$sig "${term_child_pid}" 2>/dev/null
    else
        echo "run: handle_term: child PID not known by the signer handler ..."
        term_kill_needed="$sig"
    fi
}

execute() {
    trap 'handle_term TERM' TERM
    trap 'handle_term INT' INT
    unset term_child_pid
    unset term_kill_needed

    "$@" &
    wait_term
}

if [[ -f "${THIS_DIR}/${target}.sh" || -f "${THIS_DIR}/${target}" || -f "${THIS_DIR}/${target}.py" ]]; then
    if [[ -f "${THIS_DIR}/${target}.sh" ]]; then
        "${target_entrypoint_file}" "$@"
        exit 0
    fi
    if [[ -f "${THIS_DIR}/${target}.py" ]]; then
        "${THIS_DIR}/${target}.py" "$@"
        exit 0
    fi

    execute "${THIS_DIR}/${target}" "$@"
    exit 0
fi

target_entrypoint_dir="${THIS_DIR}/${target}"

target_entrypoint_file="${target_entrypoint_dir}/${second_target}"

if [[ -e "${target_entrypoint_file}" ]]; then
    shift # eat second_target

    execute "${target_entrypoint_file}" "$@"
    exit 0
fi

target_entrypoint_file_py="${target_entrypoint_dir}/${second_target}.py"

if [[ -e "${target_entrypoint_file_py}" ]]; then
    shift # eat second_target

    execute "${target_entrypoint_file_py}" "$@"
    exit 0
fi

target_entrypoint_file_sh="${target_entrypoint_dir}/${second_target}.sh"

if [[ -e "${target_entrypoint_file_sh}" ]]; then
    shift # eat second_target

    execute "${target_entrypoint_file_sh}" "$@"
    exit 0
fi

if [[ -e "projects/${target}/testing/${second_target}" || -e "projects/${target}/testing/${second_target}.sh" || -e "projects/${target}/testing/${second_target}.py" ]]; then
    shift # eat second_target

    if [[ -e "projects/${target}/testing/${second_target}" ]]; then
        target_entrypoint_file="projects/${target}/testing/${second_target}"
    elif [[ -e "projects/${target}/testing/${second_target}.py" ]]; then
        target_entrypoint_file="projects/${target}/testing/${second_target}.py"
    else
        target_entrypoint_file="projects/${target}/testing/${second_target}.sh"
    fi

    execute "${target_entrypoint_file}" "$@"
    exit 0
fi

echo
echo "FATAL: Unknown entrypoint '${second_target}' inside '${target}' directory | $@"
echo
list_available "$target_entrypoint_dir"

false
exit 1
