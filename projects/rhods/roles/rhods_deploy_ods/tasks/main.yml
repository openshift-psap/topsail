---
- name: Create RHODS namespaces
  shell:
    set -o pipefail;
    oc create ns {{ item }} --dry-run=client -oyaml | oc apply -f-
  loop:
  - "{{ rhods_namespace }}"
  - redhat-ods-applications
  - redhat-ods-monitoring

- name: Create the src directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src"
    state: directory
    mode: '0755'

- name: Apply the RHODS catalog template
  template:
    src: "{{ rhods_install_ods_catalog }}"
    dest: "{{ artifact_extra_logs_dir }}/src/000_rhods_catalog.yml"
    mode: '0400'

- name: Delete the RHODS catalog if it exists
  command: oc delete -f "{{ artifact_extra_logs_dir }}/src/000_rhods_catalog.yml" --ignore-not-found

- name: Create RHODS catalog
  command: oc create -f "{{ artifact_extra_logs_dir }}/src/000_rhods_catalog.yml"

- name: Create dummy secrets
  shell: |
    set -o pipefail
    oc create secret generic redhat-rhods-deadmanssnitch -n redhat-ods-monitoring \
               --from-literal="SNITCH_URL=https://nosnch.in/c2354d53d2" \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic redhat-rhods-pagerduty -n redhat-ods-monitoring \
               --from-literal=PAGERDUTY_KEY=not-a-key \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic addon-managed-odh-parameters -n redhat-ods-operator \
               --from-literal=notification-email=not-an-email@local.com \
               -oyaml --dry-run=client \
               | oc apply -f-
    oc create secret generic redhat-rhods-smtp -n redhat-ods-monitoring \
               --from-literal=host=dummy.svc \
               --from-literal=port=1234 \
               --from-literal=username=USERNAME \
               --from-literal=password=PASSWORD \
               -oyaml --dry-run=client \
               | oc apply -f-


- name: Test if the RHODS operator is installed
  command:
     oc get subscription.operators.coreos.com -A -oname
       -loperators.coreos.com/{{ rhods_manifest_name }}.openshift-operators
  failed_when: false
  register: has_rhods_operator_cmd

- name: Install RHODS operator
  when: not has_rhods_operator_cmd.stdout
  include_role:
    name: cluster_deploy_operator
  vars:
    cluster_deploy_operator_catalog: "{{ rhods_catalog_name }}"
    cluster_deploy_operator_manifest_name: "{{ rhods_manifest_name }}"
    cluster_deploy_operator_namespace: "{{ rhods_namespace }}"
    cluster_deploy_operator_all_namespaces: "True"
    cluster_deploy_operator_catalog_namespace: "{{ rhods_namespace }}"
    cluster_deploy_operator_channel: "{{ rhods_deploy_ods_channel }}"
    cluster_deploy_operator_version: "{{ rhods_deploy_ods_version }}"

- name: Wait for the DataScienceCluster resource to be created
  command:
    oc get datasciencecluster -oname
  register: has_datasciencecluster_cmd
  until: has_datasciencecluster_cmd.stdout
  retries: 60
  delay: 10
