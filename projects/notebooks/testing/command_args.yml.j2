{% set scale_test_imagestream = "image-registry.openshift-image-registry.svc:5000/"+ tests.notebooks.namespace +"/"+ tests.notebooks.imagestream_name %}

{% set secrets_location = secrets.dir.name | or_env(secrets.dir.env_key) %}
{% if not secrets_location %}
  {{ ("ERROR: secrets_location must be defined (secrets.dir.name="+ secrets.dir.name|string +" or env(secrets.dir.env_key=" + secrets.dir.env_key|string + ")) ") | raise_exception }}
{% endif %}
{% set s3_ldap_password_location = secrets_location + "/" + secrets.s3_ldap_password_file %}
{% set notebook_performance_namespace = tests.notebooks.namespace + "-single-notebook" %}

__aliases:
  driver_preload_image: &driver_preload_image
    node_selector_key: {{ clusters.driver.compute.machineset.taint.key }}
    node_selector_value: "{{ clusters.driver.compute.machineset.taint.value }}"
    pod_toleration_effect: {{ clusters.driver.compute.machineset.taint.effect }}
    pod_toleration_key: {{ clusters.driver.compute.machineset.taint.key }}

cluster deploy_ldap:
  idp_name: {{ ldap.idp_name }}
  secret_properties_file: {{ s3_ldap_password_location }}
  username_count: {{ ldap.users.count }}
  username_prefix: {{ ldap.users.prefix }}
  wait: true

rhods deploy_ods:
  catalog_image: {{ rhods.catalog.image }}
  tag: {{ rhods.catalog.tag }}
  channel: {{ rhods.catalog.channel }}
  version: {{ rhods.catalog.version }}

sutest/cluster set_scale:
  instance_type: {{ clusters.create.ocp.compute.type }}
  name: {{ clusters.sutest.compute.machineset.name }}
{% if clusters.sutest.compute.dedicated %}
  taint: {{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}:{{ clusters.sutest.compute.machineset.taint.effect }}
{% endif %}
  scale: SET_AT_RUNTIME

driver/cluster set_scale:
  instance_type: {{ clusters.create.ocp.compute.type }}
  name: {{ clusters.driver.compute.machineset.name }}
{% if clusters.driver.compute.dedicated %}
  taint: {{ clusters.driver.compute.machineset.taint.key }}={{ clusters.driver.compute.machineset.taint.value }}:{{ clusters.driver.compute.machineset.taint.effect }}
{% endif %}
  scale: SET_AT_RUNTIME

cluster set_scale/notebook-performance:
  instance_type: SET_AT_RUNTIME
  name: {{ clusters.sutest.compute.machineset.name }}
{% if clusters.sutest.compute.dedicated %}
  taint: {{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}:{{ clusters.sutest.compute.machineset.taint.effect }}
{% endif %}
  scale: 1

driver/cluster set_project_annotation/node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.driver.compute.machineset.taint.key }}={{ clusters.driver.compute.machineset.taint.value }}"
  project: {{ tests.notebooks.namespace }}

driver/cluster set_project_annotation/toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.driver.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.driver.compute.machineset.taint.key }}\"}]'
  project: {{ tests.notebooks.namespace }}

sutest/cluster set_project_annotation/rhods_notebooks_node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}"
  project: rhods-notebooks

sutest/cluster set_project_annotation/rhods_notebooks_toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.sutest.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.sutest.compute.machineset.taint.key }}\"}]'
  project: rhods-notebooks

sutest/cluster set_project_annotation/single_notebook_node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}"
  project: {{ notebook_performance_namespace }}

sutest/cluster set_project_annotation/single_notebook_toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.sutest.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.sutest.compute.machineset.taint.key }}\"}]'
  project: {{ notebook_performance_namespace }}

sutest/cluster set_project_annotation/node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}"
  all: true

sutest/cluster set_project_annotation/toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{"operator": "Exists", "effect": "{{ clusters.sutest.compute.machineset.taint.effect }}", "key": "{{ clusters.sutest.compute.machineset.taint.key }}"}]'
  all: true

cluster build_push_image/artifacts-exporter:
  namespace: {{ tests.notebooks.namespace }}
  dockerfile_path: projects/notebooks/testing/images/Containerfile.s3_artifacts_exporter
{% set artifacts_exporter_tag = "artifacts-exporter" %}
  tag: {{ artifacts_exporter_tag }}
  image_local_name: {{ tests.notebooks.imagestream_name }}

cluster preload_image/artifacts-exporter:
  namespace: {{ tests.notebooks.namespace }}
  name: {{ artifacts_exporter_tag }}
  image: {{ scale_test_imagestream }}:{{ artifacts_exporter_tag }}
  <<: *driver_preload_image

cluster build_push_image/ods-ci:
  namespace: {{ tests.notebooks.namespace }}
  git_repo: {{ tests.notebooks.ods_ci.image.repo }}
  git_ref: {{ tests.notebooks.ods_ci.image.ref }}
  dockerfile_path: ods_ci/build/Dockerfile
{% set ods_ci_tag = "ods-ci" %}
  tag: {{ ods_ci_tag }}
  image_local_name: {{ tests.notebooks.imagestream_name }}

cluster preload_image/ods-ci:
  namespace: {{ tests.notebooks.namespace }}
  name: {{ ods_ci_tag }}
  image: {{ scale_test_imagestream }}:{{ ods_ci_tag }}
  <<: *driver_preload_image


cluster preload_image/notebook:
  namespace: redhat-ods-applications
  image: SET_AT_RUNTIME
  node_selector_key: {{ clusters.sutest.compute.machineset.taint.key }}
  node_selector_value: "{{ clusters.sutest.compute.machineset.taint.value }}"
  pod_toleration_effect: {{ clusters.sutest.compute.machineset.taint.effect }}
  pod_toleration_key: "{{ clusters.sutest.compute.machineset.taint.key }}"

cluster deploy_redis_server:
{% set redis_namespace = tests.notebooks.namespace + "-redis" %}
{% set redis_internal_address = "redis."+redis_namespace+".svc" %}
  namespace: {{ redis_namespace }}


cluster deploy_minio_s3_server:
{% set minio_namespace = tests.notebooks.namespace + "-minio" %}
  namespace: {{ minio_namespace }}
  secret_properties_file: {{ s3_ldap_password_location }}
  bucket_name: {{ tests.notebooks.minio_bucket_name }}

cluster deploy_nginx_server:
{% set nginx_namespace = tests.notebooks.namespace + "-nginx" %}
  namespace: {{ nginx_namespace }}
  directory: {{ tests.notebooks.ipynb.uploaded_directory }}

notebooks benchmark_performance:
  namespace: {{ notebook_performance_namespace }}

notebooks ods_ci_scale_test:
  namespace: {{ tests.notebooks.namespace }}
  artifacts_collected: {{ tests.notebooks.artifacts_collected }}
  idp_name: {{ ldap.idp_name }}
  artifacts_exporter_istag: "{{ tests.notebooks.imagestream_name }}:{{ artifacts_exporter_tag }}"
  ods_ci_istag: "{{ tests.notebooks.imagestream_name }}:{{ ods_ci_tag }}"
  ods_ci_exclude_tags: {{ tests.notebooks.ods_ci.excluded_tags }}
  ods_ci_test_case: {{ tests.notebooks.ods_ci.test_case }}
  notebook_benchmark_name: {{ tests.notebooks.benchmark.name }}
  notebook_benchmark_number: {{ tests.notebooks.benchmark.number }}
  notebook_benchmark_repeat: {{ tests.notebooks.benchmark.repeat }}
  notebook_image_name: {{ tests.notebooks.notebook.image_name }}
  notebook_size_name: {{ tests.notebooks.notebook.size_name }}
  minio_namespace: {{ minio_namespace }}
  minio_bucket_name: {{ tests.notebooks.minio_bucket_name }}
  user_sleep_factor: {{ tests.notebooks.users.sleep_factor }}
  user_batch_size: {{ tests.notebooks.users.batch_size }}
  secret_properties_file: {{ s3_ldap_password_location }}
  state_signal_redis_server: {{ redis_internal_address }}
  toleration_key: {{ clusters.driver.compute.machineset.taint.key }}
  user_count: {{ tests.notebooks.users.count }}
  user_index_offset: {{ tests.notebooks.users.start_offset }}
  username_prefix: {{ ldap.users.prefix }}
{% if clusters.create.type == "single" %}
  notebook_url: "http://nginx.{{ nginx_namespace }}.svc/{{ tests.notebooks.ipynb.notebook_filename }}"
{% else %}
  notebook_url: SET_AT_RUNTIME # set at runtime
{% endif %}
  capture_prom_db: {{ "" | or_env("CI_ARTIFACTS_CAPTURE_PROM_DB") | default(tests.notebooks.capture_prom_db, true) }}
  only_create_notebooks: {{ tests.notebooks.ods_ci.only_create_notebooks }}
  stop_notebooks_on_exit: {{ tests.notebooks.ods_ci.stop_notebooks_on_exit }}

sutest/cluster set_scale/cleanup:
  instance_type: not-used
  name: {{ clusters.sutest.compute.machineset.name }}
  scale: 0

driver/cluster set_scale/cleanup:
  instance_type: not-used
  name: {{ clusters.driver.compute.machineset.name }}
  scale: 0

notebooks cleanup:
  username_prefix: {{ ldap.users.prefix }}

cluster undeploy_ldap:
  idp_name: {{ ldap.idp_name }}


notebooks dashboard_scale_test:
  namespace: {{ tests.notebooks.namespace }}
  artifacts_collected: {{ tests.notebooks.artifacts_collected }}
  idp_name: {{ ldap.idp_name }}
  artifacts_exporter_istag: "{{ tests.notebooks.imagestream_name }}:{{ artifacts_exporter_tag }}"
  ods_ci_istag: "{{ tests.notebooks.imagestream_name }}:{{ ods_ci_tag }}"
  ods_ci_test_case: {{ tests.notebooks.ods_ci.test_case }}
  minio_namespace: {{ minio_namespace }}
  minio_bucket_name: {{ tests.notebooks.minio_bucket_name }}
  user_sleep_factor: {{ tests.notebooks.users.sleep_factor }}
  user_batch_size: {{ tests.notebooks.users.batch_size }}
  secret_properties_file: {{ s3_ldap_password_location }}
  state_signal_redis_server: {{ redis_internal_address }}
  toleration_key: {{ clusters.driver.compute.machineset.taint.key }}
  user_count: {{ tests.notebooks.users.count }}
  user_index_offset: {{ tests.notebooks.users.start_offset }}
  username_prefix: {{ ldap.users.prefix }}
  capture_prom_db: {{ "" | or_env("CI_ARTIFACTS_CAPTURE_PROM_DB") | default(tests.notebooks.capture_prom_db, true) }}
