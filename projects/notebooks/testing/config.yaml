ci_presets:
  # name of the presets to apply, or null if no preset
  name: null
  # list of names of the presets to apply, or a single name, or null if no preset
  names: null

  # run the DSG Notebook scale test
  notebook_scale_test:
    clusters.create.ocp.tags.Project: PSAP/RHODS/scale_test
    tests.notebooks.users.count: 300
    clusters.create.ocp.control_plane.type: m6i.2xlarge
    clusters.create.ocp.workers.type: m6i.2xlarge
    clusters.create.ocp.compute.type: m6i.2xlarge
    tests.notebooks.users.sleep_factor: 3.0
    tests.notebooks.test_flavor: ods-ci
    tests.notebooks.ods_ci.test_case: notebook_dsg_test.robot
    tests.notebooks.repeat: 2
    tests.notebooks.identifier: scale_test

  # run the notebook gating tests
  # (DSG and Jupyter scale tests, notebook performance)
  notebook_gating_scale_test:
    clusters.create.ocp.control_plane.type: m6i.2xlarge
    clusters.create.ocp.workers.type: m6i.2xlarge
    clusters.create.ocp.tags.Project: PSAP/RHODS/gating
    clusters.create.ocp.tags.TicketId:

    matbench.lts.horreum.test_name: RHOAI-notebooks
    tests.notebooks.identifier: gating_test
    tests.notebooks.test_flavor: gating
    # modify the presets, as they will be applied by the gating test
    'ci_presets.notebook_performance["tests.notebooks.notebook_performance.tests[0].instance_types"]': [m6i.2xlarge]
    'ci_presets.notebook_scale_test["tests.notebooks.identifier"]': "notebook_gating_test:scale_test"
    'ci_presets.notebook_performance["tests.notebooks.identifier"]': "notebook_gating_test:performance_test"

  notebook_gating_scale_test_light:
    extends: [notebook_gating_scale_test]
    'ci_presets.notebook_scale_test["tests.notebooks.users.count"]': 4
    'ci_presets.notebook_scale_test["tests.notebooks.repeat"]': 1
    'ci_presets.notebook_performance["clusters.sutest.compute.dedicated"]': false


  notebook_scale_test_dsg:
    extends: [notebook_scale_test]
    tests.notebooks.ods_ci.test_case: notebook_dsg_test.robot

  # run the Jupyter Notebook scale test
  notebook_scale_test_jupyter:
    extends: [notebook_scale_test]
    tests.notebooks.ods_ci.test_case: notebook_jupyter_test.robot

  # run the notebook image performance test on RHODS (benchmark mode)
  notebook_performance:
    tests.notebooks.test_flavor: notebook-performance
    matbench.config_file: single_notebook_perf.yaml
    matbench.workload: rhods-notebooks-performance
    tests.notebooks.users.count: 1
    clusters.sutest.compute.dedicated: true
    'ci_presets.notebooks_light["clusters.sutest.compute.dedicated"]': true
    matbench.lts.opensearch.upload: true
    matbench.lts.opensearch.fail_test_on_upload_fail: false
    matbench.lts.opensearch.index: rhoai-notebooks-performance

  notebook_performance_light:
    extends: [notebook_performance]
    tests.notebook_performance.test_only_one_image: true

  cleanup:
    tests.notebooks.cleanup.on_exit.skip_if_le_than_users: 0
    tests.notebooks.cleanup.on_exit.driver.delete_test_namespaces: true
    tests.notebooks.cleanup.on_exit.sutest.uninstall_rhods: true
    tests.notebooks.cleanup.on_exit.sutest.delete_test_namespaces: true
    tests.notebooks.cleanup.on_exit.sutest.uninstall_ldap: true
    tests.notebooks.cleanup.on_exit.sutest.remove_dsg_notebook_dedicated_toleration: true

  # cluster creation presets

  single:
    clusters.create.type: single

  keep:
    clusters.create.keep: true
    clusters.create.ocp.tags.Project: PSAP/RHODS/home-dev

  ocp:
    clusters.create.type: ocp

  light_cluster:
    clusters.create.ocp.deploy_cluster.target: cluster_light

  # preset used in CI-provided clusters to limit the scale of the test
  notebooks_light:
    clusters.create.ocp.tags.Project: PSAP/RHODS/ci-dev

    clusters.sutest.compute.dedicated: false
    clusters.sutest.compute.machineset.count: 1

    clusters.driver.compute.dedicated: true
    clusters.driver.compute.machineset.count: 1

    tests.notebooks.users.count: 4
    'ci_presets.notebook_scale_test["tests.notebooks.users.count"]': 4

  light:
    extends: [light_cluster, notebooks_light]

  metal:
    clusters.sutest.is_metal: true
    clusters.driver.compute.dedicated: false
    clusters.sutest.compute.dedicated: false

  not_metal:
    clusters.sutest.is_metal: false

  fips:
    clusters.create.ocp.use_fips: true

  icelake:
    extends: [metal]
    clusters.create.ocp.compute.type: icelake
    clusters.driver.compute.dedicated: false
    clusters.sutest.compute.dedicated: false
    'ci_presets.notebook_performance["clusters.sutest.compute.dedicated"]': false

  icelake_notebook_gating_test:
    extends: [notebook_gating_scale_test, metal, icelake, use_intlab_os]
    'ci_presets.notebook_scale_test["tests.notebooks.users.count"]': 150

  use_intlab_os:
    matbench.lts.opensearch.index_prefix: "psap-rhoai."
    matbench.lts.opensearch.instance: intlab

  help:
    tests.show_help: true
secrets:
  dir:
    name: null
    env_key: PSAP_ODS_SECRET_PATH
  # name of the file containing the properties of LDAP secrets
  s3_ldap_password_file: s3_ldap.passwords
  keep_cluster_password_file: get_cluster.password
  brew_registry_redhat_io_token_file: brew.registry.redhat.io.token
  opensearch_instances: opensearch.yaml
  aws_credentials: .awscred
clusters:
  create:
    type: single # can be: single, ocp
    keep: false
    name_prefix: odsci
    sutest_already_exists:
      hostname: null
      username: null
    ocp:
      # list of tags to apply to the machineset when creating the cluster
      tags: {}

      deploy_cluster:
        target: cluster
      use_fips: false
      base_domain: psap.aws.rhperfscale.org
      version: 4.12.12
      region: us-west-2
      control_plane:
        type: m6a.xlarge
      workers:
        type: m6a.2xlarge
        count: 2
      compute:
        type: m6i.2xlarge

  cleanup:
    max_age: 4 # hours

  sutest:
    is_metal: false
    lab:
      name: null
    compute:
      dedicated: true
      autoscaling:
        enabled: false
      machineset:
        name: rhods-compute-pods
        count: null
        taint:
          key: only-rhods-compute-pods
          value: "yes"
          effect: NoSchedule
  driver:
    compute:
      autoscaling:
        enabled: false
      dedicated: true
      machineset:
        name: test-pods
        count: null
        taint:
          key: &driver_toleration_key only-test-pods
          value: "yes"
          effect: NoSchedule

ldap:
  # Name of the LDAP identity provider.
  idp_name: RHODS_CI_LDAP
  users:
    # number of users to create
    count: 2000
    # prefix of the user names of the LDAP provider
    prefix: psapuser

rhods:
  catalog:
    image: brew.registry.redhat.io/rh-osbs/iib
    tag: 682686
    channel: fast
    version: 2.8.0
    version_name: rc1
  notebooks:
    customize:
      enabled: true
      pvc_size: 5Gi
      notebook_size:
        enabled: true
        name: &notebook_size_name Tiny
        cpu: 1
        mem_gi: 4
  operator:
    # set to true to stop the RHODS operator
    stop: false

    odh_notebook_controller:
      image: null
      replicas: null

    notebook_controller_deployment:
      image: null

    dashboard:
      image: null
      replicas: null
      resources_cpu: null

  admin:
    count: 2 # the first N users will be granted these privileges
    roles:
    - view
    - odh-notebook-controller-notebooks-edit
tests:
  # if true, show the list of available presets and exits.
  show_help: false
  notebooks:
    # The test flavor to run. Can be: ods-ci, notebook-performance or gating
    test_flavor: ods-ci
    identifier: unspecified
    minio_bucket_name: notebooks
    # number of test repetition to perform
    repeat: 1
    users:
      # number of users to simulate
      count: 4
      # offset to add to the Pod user index when computing the user name
      start_offset: 0
      # how long to wait between user starts, multiplied by the user index
      sleep_factor: 5.0
      # number of users to launch at the same time
      batch_size: 1

    # namespace in which the scale test should run
    namespace: notebook-scale-test
    imagestream_name: scale-test
    # Artifacts that should be collected:
    # - 'all': collect all the artifacts generated by ODS-CI.
    # - 'no-screenshot': exclude the screenshots (selenium-screenshot-*.png) from the artifacts collected.
    # - 'no-screenshot-except-zero': exclude the screenshots, except if the job index is zero.
    # - 'no-screenshot-except-failed': exclude the screenshots, except if the test failed.
    # - 'no-screenshot-except-failed-and-zero': exclude the screenshots, except if the test failed or the job index is zero.
    # - 'none': do not collect any ODS-CI artifact.
    artifacts_collected: no-screenshot-except-failed-and-zero
    # Should be true to capture Prometheus databases and properly generate the cluster usage metrics
    # Can be overriden by CI_ARTIFACTS_CAPTURE_PROM_DB
    capture_prom_db: true
    notebook:
      # name of the RHODS notebook size to select when launching the notebook.
      size_name: *notebook_size_name
      # name of the RHODS imagestream to use when launching the notebooks.
      image_name: s2i-generic-data-science-notebook
    ods_ci:
      # ODS-CI test case to execute.
      test_case: notebook_dsg_test.robot
      # mode in which the ODS-CI test should be executed
      image:
        repo: https://github.com/red-hat-data-services/ods-ci.git
        ref: master
      # tags to exclude when running the robot test case
      excluded_tags: None
      # if true, only create the notebooks but don't start them
      only_create_notebooks: false
      stop_notebooks_on_exit: true
    test_pods:
      # must be consistent with roles/notebooks_ods_ci_scale_test/templates/ods-ci_job.yaml
      size:
        cpu: 0.2
        mem_gi: 0.75
      toleration: *driver_toleration_key
    ipynb:
      uploaded_directory: projects/notebooks/testing/notebooks
      notebook_filename: benchmark_entrypoint.ipynb
    benchmark:
      # name of the benchmark to pass to the notebook
      name: pyperf_bm_go.py
      # number of times the benchmark should be executed within one repeat.
      number: 20
      # number of repeats of the benchmark to perform.
      repeat: 3
    cleanup:
      on_exit:
        skip_if_le_than_users: 5
        driver:
          # if enable, delete the test namespaces after the testing
          delete_test_namespaces: false
        sutest:
          # if enable, uninstall RHODS
          uninstall_rhods: false
          delete_test_namespaces: false
          uninstall_ldap: false
          remove_dsg_notebook_dedicated_toleration: false

    notebook_performance:
      incompatible_images:
      - odh-code-server-notebook
      tests:
      - imagestream: all
        ipynb:
          uploaded_directory: projects/notebooks/testing/notebooks
          notebook_filename: benchmark_entrypoint.ipynb
        instance_types:
        - m6i.xlarge
        benchmarks:
          # name of the benchmark to pass to the notebook
        - name: pyperf_bm_go.py
          # number of times the benchmark should be executed within one repeat.
          number: 20
          # number of repeats of the benchmark to perform.
          repeat: 5
      # for faster smoke testing
      test_only_one_image: false
    # List of preset configurations to run as part of the 'gating' test
    gating_tests:
    - notebook_scale_test_dsg
    - notebook_scale_test_jupyter
    - notebook_performance

matbench:
  preset: null
  workload: rhods-notebooks
  config_file: notebook_scale_test_ods_ci.yaml # visualizations/rhods-notebooks/data
  download:
    mode: prefer_cache
    url:
    url_file:
    # if true, copy the results downloaded by `matbench download` into the artifacts directory
    save_to_artifacts: false
  ignore_exit_code: true
  # directory to plot. Set by notebook_scale_test.sh before launching the visualization
  test_directory: null
  lts:
    generate: true
    horreum:
      test_name: null
    opensearch:
      upload: true
      fail_test_on_upload_fail: false
      instance: smoke
      index: rhoai-notebooks-scale
      index_prefix: ""
    regression_analyses:
      enabled: true
      # if the regression analyses fail, mark the test as failed
      fail_test_on_regression_fail: false
export_artifacts:
  enabled: true
  bucket: rhoai-cpt-artifacts
  path_prefix: cpt/notebooks
  dest: null # will be set by the export code
