- name: Create the driver artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts-driver/"
    state: directory
    mode: '0755'

- name: Get the status of the tester Job
  shell:
    oc get job/{{ tester_job_name }}
       -n {{ tester_namespace }}
        > "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_job.status"
  ignore_errors: true

- name: Get the yaml of the tester Job
  shell:
    oc get job/{{ tester_job_name }} -oyaml
       -n {{ tester_namespace }}
       > "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_job.yaml"
  ignore_errors: true

- name: Get the status of the tester Pods
  shell:
    oc get pods -ljob-name={{ tester_job_name }}
       -n {{ tester_namespace }}
        > "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_pods.status"
  ignore_errors: true

- name: Get the yaml of the tester Pods
  shell:
    oc get pods -ljob-name={{ tester_job_name }} -oyaml
       -n {{ tester_namespace }}
       > "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_pods.yaml"
  ignore_errors: true

- name: Get the json of the tester Pods
  shell:
    oc get pods -ljob-name={{ tester_job_name }} -ojson
       -n {{ tester_namespace }}
       > "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_pods.json"
  ignore_errors: true

- name: Get Minio Pod name
  command: oc get pod -lapp=minio -n {{ notebooks_ods_ci_scale_test_minio_namespace }} -ojsonpath={.items[0].metadata.name}
  register: minio_podname_cmd
  ignore_errors: true

- name: Export the data out of the S3 bucket
  command:
    oc -n {{ notebooks_ods_ci_scale_test_minio_namespace }} -c mc
       exec "{{ minio_podname_cmd.stdout }}"
       -- bash -c 'mkdir -p /artifacts/to_export && mc --config-dir /tmp cp minio/{{ notebooks_ods_ci_scale_test_minio_bucket_name }}/ /artifacts/to_export --recursive --quiet > /dev/null'
  when: 'test_artifacts_collected != "none"'
  ignore_errors: true

- name: Extract the test artifacts from the Minio S3 container
  shell: |
    set -o pipefail

    oc -n {{ notebooks_ods_ci_scale_test_minio_namespace }} -c ubi8 \
       rsync "{{ minio_podname_cmd.stdout }}:/artifacts/to_export/" "{{ artifact_extra_logs_dir }}" --quiet

    rm -f "{{ artifact_extra_logs_dir }}/os-release"
  when: 'test_artifacts_collected != "none"'
  ignore_errors: true

- name: Get the names of the tester_pods
  command:
    oc get pods -oname -ljob-name={{ tester_job_name }}
       -n {{ tester_namespace }}
  register: pod_names_cmd
  ignore_errors: true
  # mute to reduce the log length
  no_log: true

- name: Create the test Pod logs directory
  file:
    path: "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_pod_logs"
    state: directory
    mode: '0755'

- name: Get the logs of the tester Pod
  shell: |
    oc logs {{ item }} --all-containers --prefix \
         -n {{ tester_namespace }} \
         > "{{ artifact_extra_logs_dir }}/artifacts-driver/tester_pod_logs/$(basename "{{ item }}").log";
  loop: "{{ pod_names_cmd.stdout_lines }}"
  ignore_errors: true
  # mute to reduce the log length
  no_log: true

- name: Store the Cluster nodes in yaml
  shell:
    oc get nodes -oyaml > "{{ artifact_extra_logs_dir }}/artifacts-driver/nodes.yaml"
  ignore_errors: true

- name: Store the Cluster nodes in json
  shell:
    oc get nodes -ojson > "{{ artifact_extra_logs_dir }}/artifacts-driver/nodes.json"
  ignore_errors: true

- name: Get the description of the nodes
  shell:
    oc describe nodes
        > "{{ artifact_extra_logs_dir }}/artifacts-driver/nodes.descr"
  ignore_errors: true

- name: Store the Cluster machines status
  shell:
    oc get machines -n openshift-machine-api -owide > "{{ artifact_extra_logs_dir }}/artifacts-driver/machines.status"
  ignore_errors: true

- name: Store the Cluster machines description
  shell:
    oc describe machines -n openshift-machine-api > "{{ artifact_extra_logs_dir }}/artifacts-driver/machines.desc"
  ignore_errors: true

- name: Get the Prometheus database
  include_role:
    name: cluster_prometheus_db
  vars:
    cluster_prometheus_db_mode: dump
    cluster_prometheus_db_dump_name_prefix: artifacts-driver/prometheus_ocp
  when: capture_prom_db | bool
  ignore_errors: true
