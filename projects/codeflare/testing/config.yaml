ci_presets:
  # name of the presets to apply, or null if no preset
  name: null
  # list of names of the presets to apply, or a single name, or null if no preset
  names: null

  single:
    clusters.create.type: single

  keep:
    clusters.create.keep: true
    clusters.create.ocp.tags.Project: PSAP/CodeFlare/mcad/home-dev

  light_cluster:
    clusters.create.ocp.deploy_cluster.target: cluster_light

  full_cluster:
    clusters.create.ocp.deploy_cluster.target: cluster

  light:
    extends: [light_cluster]

  metal:
    clusters.sutest.is_metal: true
    clusters.driver.is_metal: true

  not_metal:
    clusters.sutest.is_metal: false
    clusters.driver.is_metal: false

  gpu:
    extends: [mcad]
    tests.want_gpu: true
    tests.mcad.tests_to_run: [gpu_all_schedulable, gpu_scheduling, gpu_scheduling_job_mode, gpu_unschedulable]

  fill_workernodes:
    clusters.sutest.worker.fill_resources.enabled: true

  mcad:
    tests.mode: mcad
    matbench.generate_lts: true

  cpu_light_unschedulable:
    extends: [mcad]
    tests.mcad.tests_to_run: [cpu_light_unschedulable]
    tests.mcad.test_multiple_values.enabled: true
    tests.mcad.test_multiple_values.settings:
      "aw.count": [200, 350, 500]

  cpu_light_scheduling:
    extends: [mcad]
    tests.mcad.tests_to_run: [cpu_light_scheduling, cpu_light_scheduling_job_mode]
    tests.mcad.test_templates.cpu_light_scheduling.aw.count: 100

  cpu_all_schedulable:
    extends: [mcad]
    clusters.sutest.worker.fill_resources.enabled: true
    tests.mcad.test_templates.common_light.node.count: 4

    tests.mcad.tests_to_run: [cpu_light_all_schedulable]
    tests.mcad.test_multiple_values.enabled: true
    tests.mcad.test_multiple_values.settings:
      aw.count: [100, 150]
      aw.job.job_mode: [true, false]

  gpu_all_schedulable:
    extends: [mcad]
    clusters.sutest.worker.fill_resources.enabled: false
    tests.want_gpu: true
    gpu.time_sharing.replicas: 100
    tests.mcad.tests_to_run: [gpu_all_schedulable]
    tests.mcad.test_multiple_values.enabled: true
    tests.mcad.test_multiple_values.settings:
      aw.count: [1, 33, 66, 100, 200]
      aw.job.job_mode: [true, false]
      node.count: 2

  icelake:
    extends: [metal]

  use_mcad_main_branch:
    odh.customize.operator.stop: true
    odh.customize.mcad.controller_image.enabled: true

  sdk_user:
    tests.mode: sdk_user
    matbench.generate_lts: false

secrets:
  dir:
    name: psap-ods-secret
    env_key: PSAP_ODS_SECRET_PATH
  # name of the file containing the properties of LDAP secrets
  s3_ldap_password_file: s3_ldap.passwords
  keep_cluster_password_file: get_cluster.password
  brew_registry_redhat_io_token_file: brew.registry.redhat.io.token
clusters:
  create:
    type: single # can be: single, ocp, managed
    keep: false
    name_prefix: codeflare-ci
    ocp:
      # list of tags to apply to the machineset when creating the cluster
      tags:
        TicketId: 248
        Project: PSAP/CodeFlare/mcad
      deploy_cluster:
        target: cluster_light
      base_domain: psap.aws.rhperfscale.org
      version: 4.12.12
      region: us-west-2
      control_plane:
        type: m6a.xlarge
      workers:
        type: m6a.2xlarge
        count: 2

  sutest:
    is_metal: false
    lab:
      name: null
    compute:
      dedicated: true
      machineset:
        name: workload-pods
        type: m6i.2xlarge
        count: 1
        taint:
          key: only-workload-pods
          value: "yes"
          effect: NoSchedule
    worker:
      label: initial_worker_node=true
      fill_resources:
        enabled: false
        namespace: worker-nodes-placeholder
  driver:
    is_metal: false
    compute:
      dedicated: true
      machineset:
        name: test-pods
        type: m6i.2xlarge
        count: null
        taint:
          key: only-test-pods
          value: "yes"
          effect: NoSchedule
  cleanup_on_exit: false
odh:
  namespace: opendatahub
  kfdefs:
  - https://raw.githubusercontent.com/opendatahub-io/odh-manifests/master/kfdef/odh-core.yaml
  - https://raw.githubusercontent.com/opendatahub-io/distributed-workloads/main/codeflare-stack-kfdef.yaml
  operators:
  - name: codeflare-operator
    catalog: community-operators
    namespace: all
  - name: opendatahub-operator
    catalog: community-operators
    namespace: all
  customize:
    operator:
      stop: false
    mcad:
      controller_image:
        enabled: false
        image: quay.io/project-codeflare/mcad-controller
        tag: main-v1.32.0

codeflare:
  mcad:
    deploy_from: helm
    helm:
      git:
        repo: https://github.com/project-codeflare/multi-cluster-app-dispatcher
        ref: main
      image:
        repo: quay.io/project-codeflare/mcad-controller
        tag: stable
gpu:
  time_sharing:
    replicas: 10

base_image: # only used in sdk_user test mode
  namespace: codeflare-sdk-user-test-driver
  imagestream: ci-artifacts
  repo:
    url: https://github.com/openshift-psap/ci-artifacts/
    tag: main
    ref: main
    ref_prefer_pr: true
    dockerfile_path: build/Dockerfile
  extend:
    enabled: true
    local_dockerfile_path: projects/codeflare/testing/images/Containerfile.codeflare_sdk
    tag: codeflare-sdk
  user:
    service_account: ci-artifacts
    role: cluster-admin
  minio:
    bucket_name: pipelines-scale-test-bucket

tests:
  mode: mcad

  dry_mode: false
  visualize: true
  capture_prom: true
  want_gpu: false

  mcad:
    namespace: mcad-load-test

    prepare_nodes: true
    stop_on_error: true

    tests_to_run: [cpu_light_all_schedulable]
    distribution: poisson

    test_multiple_values:
      enabled: false
      matbench_config_file: plot_multiple_tests.yaml
      settings:
        aw.count: [200, 500, 750, 1000]
        aw.job.job_mode: [true, false]
    test_templates_file: test_templates.yaml # relative to testing/codeflare directory

  sdk_user:
    namespace: codeflare-sdk-user-test
    user_count: 2
    sleep_factor: 1
    user_batch_size: 1

    user_index: null # will be set at runtime

    user_code:
      directory: sample
      entrypoint: sample

    ray_cluster:
      name: mnisttest
      image: "quay.io/project-codeflare/ray:2.5.0-py38-cu116"
      workers: 2
      cpu: 1
      memory: 2
      gpu: 0

    job:
      name: mnisttest
      script: mnist.py

matbench:
  preset: null
  workload: codeflare
  config_file: plots.yaml
  download:
    mode: prefer_cache
    url:
    url_file:
    # if true, copy the results downloaded by `matbench download` into the artifacts directory
    save_to_artifacts: false
  ignore_exit_code: true
  # directory to plot. Set by testing/common/visualize.py before launching the visualization
  test_directory: null
  generate_lts: true
