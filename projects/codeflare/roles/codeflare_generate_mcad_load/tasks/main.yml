- name: Ensure that there are no AppWrappers in the namespace
  shell:
    oc delete appwrappers --all -n "{{ codeflare_generate_mcad_load_namespace }}" > /dev/null

- name: Reset the MCAD controller
  command:
    oc delete pod -l{{ codeflare_generate_mcad_load_mcad_labels }} -n {{ codeflare_generate_mcad_load_mcad_namespace }}

- name: Ensure that the MCAD controller is ready
  shell:
    set -o pipefail;
    oc get deploy/{{ codeflare_generate_mcad_load_mcad_deploy }} -n opendatahub --no-headers | awk '{print $2}'
  register: mcad_ready_cmd
  delay: 10
  retries: 10
  until: mcad_ready_cmd.stdout == "1/1"

- name: Save the MCAD controller deployment
  shell: |
    oc get deploy/{{ codeflare_generate_mcad_load_mcad_deploy }}  -oyaml -n {{ codeflare_generate_mcad_load_mcad_namespace }} "{{ artifact_extra_logs_dir }}/mcad-deployment.yaml"
    oc get deploy/{{ codeflare_generate_mcad_load_mcad_deploy }} -ojson -n {{ codeflare_generate_mcad_load_mcad_namespace }} > "{{ artifact_extra_logs_dir }}/mcad-deployment.json"

- name: Save the MCAD controller Pods
  shell: |
    oc get pod -l{{ codeflare_generate_mcad_load_mcad_labels }} -n {{ codeflare_generate_mcad_load_mcad_namespace }} -oyaml > "{{ artifact_extra_logs_dir }}/mcad-pods.yaml"
    oc get pod -l{{ codeflare_generate_mcad_load_mcad_labels }} -n {{ codeflare_generate_mcad_load_mcad_namespace }} -ojson > "{{ artifact_extra_logs_dir }}/mcad-pods.json"

- name: Ensure that there are no Jobs in the namespace
  shell:
    oc delete jobs --all -n "{{ codeflare_generate_mcad_load_namespace }}" > /dev/null

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Create the generator artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/generator-artifacts/"
    state: directory
    mode: '0755'

- name: Create the namespace if it does not exist
  shell:
    set -o pipefail;
    oc create ns "{{ codeflare_generate_mcad_load_namespace }}" -oyaml --dry-run=client | tee "{{ artifact_extra_logs_dir }}/src/namespace.yaml" | oc apply -f-

- name: Create a configmap for the beginning of the test timestamp
  shell:
    oc delete cm start end -n "{{ codeflare_generate_mcad_load_namespace }}" --ignore-not-found;
    oc create configmap start -n "{{ codeflare_generate_mcad_load_namespace }}" ;

- name: Generate MCAD load
  block:
  - name: Run the load test
    debug: msg="Load generator running in the next task, expect some delays (timespan={{ codeflare_generate_mcad_load_timespan }}min)... (job_mode={{ codeflare_generate_mcad_load_job_mode }})"

  - name: Generate the MCAD load
    shell: |
      export ARTIFACT_DIR="{{ artifact_extra_logs_dir }}/generator-artifacts"

      python3 "{{ mcad_load_generator }}" \
        --dry_run "False" \
        --namespace "{{ codeflare_generate_mcad_load_namespace }}" \
        --aw_base_name "{{ codeflare_generate_mcad_load_aw_base_name }}" \
        --job_template_name "{{ codeflare_generate_mcad_load_job_template_name }}" \
        --job_mode "{{ codeflare_generate_mcad_load_job_mode }}" \
        --aw_count "{{ codeflare_generate_mcad_load_aw_count }}" \
        --pod_count "{{ codeflare_generate_mcad_load_pod_count }}" \
        --pod_runtime "{{ codeflare_generate_mcad_load_pod_runtime }}" \
        --pod_requests "{{ codeflare_generate_mcad_load_pod_requests }}" \
        --timespan "{{ codeflare_generate_mcad_load_timespan }}" \
        --distribution "{{ codeflare_generate_mcad_load_distribution }}"

  - name: Define the variables
    set_fact:
      success_states: "{{ codeflare_generate_mcad_load_states_target | map('to_json') | join(', ') }}"
      failed_states: "{{ codeflare_generate_mcad_load_states_unexpected | map('to_json') | join(', ') }}"

  - name: Wait for the AppWrappers to complete
    shell: |
      set -o pipefail; set -e;
      appwrappers_json=$(oc get appwrappers -n {{ codeflare_generate_mcad_load_namespace }} -ojson)

      if [[ {{ codeflare_generate_mcad_load_aw_count }} -lt 50 ]]; then
        jq '.items[] | .metadata.name + " ==> "+ .status.state' -r <<< $appwrappers_json
      else
        echo "Too many appwrappers, hiding the individual status ..."
      fi

      appwrapper_count=$(jq '.items | length' <<< $appwrappers_json)
      appwrapper_successes=$(jq '[.items[] | select(.status.state | IN({{ success_states }}))] | length' <<< $appwrappers_json)
      appwrapper_failed=$(jq '[.items[] | select(.status.state | IN({{ failed_states }}))] | length' <<< $appwrappers_json)

      if [[ "$appwrapper_failed" != 0 ]]; then
        echo "Found $appwrapper_failed AppWrapper(s) in one of the unexpected states '{{ failed_states }}' , aborting."
        exit 1 # fatal
      fi

      if [[ "$appwrapper_count" != "$appwrapper_successes" ]]; then
         echo "Only $appwrapper_successes/$appwrapper_count AppWrappers are in the expected states '{{ success_states }}'. Continue waiting ...."
         exit 2 # retry
      fi

      echo "All the AppWrappers have completed successfully. All done."
      exit 0 # done
    register: appwrappers_completed
    retries: 120
    delay: 30
    # until fatal or done
    until: appwrappers_completed.rc == 1 or appwrappers_completed.rc == 0
    # failed when fatal
    failed_when: appwrappers_completed.rc != 0

  - name: Wait for the Jobs to complete
    shell: |
      set -o pipefail; set -e;
      jobs_json=$(oc get jobs -n {{ codeflare_generate_mcad_load_namespace }} -ojson)

      if [[ {{ codeflare_generate_mcad_load_aw_count }} -lt 50 ]]; then
        oc get jobs,pods -n {{ codeflare_generate_mcad_load_namespace }} --no-headers
      else
        echo "Too many Jobs, hiding the individual status ..."
      fi

      jobs_count=$(jq '.items | length' <<< $jobs_json)
      jobs_active=$(jq '[.items[] | select(.status.active and .status.active != 0)] | length' <<< $jobs_json)
      jobs_failed=$(jq '[.items[] | select(.status.failed and .status.failed != 0)] | length' <<< $jobs_json)

      if [[ "$jobs_failed" != 0 ]]; then
        echo "Found $jobs_failed failed Jobs(s), aborting."
        exit 1 # fatal
      fi

      if [[ "$jobs_active" != 0 ]]; then
         echo "$jobs_active/$jobs_count Jobs still active. Continue waiting ...."
         exit 2 # retry
      fi

      echo "All the Jobs have completed successfully. All done."
      exit 0 # done
    register: jobs_completed
    retries: 60
    delay: 30
    # until fatal or done
    until: jobs_completed.rc == 1 or jobs_completed.rc == 0
    # failed when fatal
    failed_when: jobs_completed.rc != 0
    when: codeflare_generate_mcad_load_job_mode

  always:
  - name: Create a configmap for the end of the test timestamp
    shell:
      oc create configmap end -n "{{ codeflare_generate_mcad_load_namespace }}" ;
      oc get cm start end -oyaml -n "{{ codeflare_generate_mcad_load_namespace }}" > "{{ artifact_extra_logs_dir }}/start_end_cm.yaml"

  - name: Capture the state of the AppWrappers
    shell: |
      oc get appwrappers -ojson -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.json"
      oc get appwrappers -oyaml -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.yaml"
      oc get appwrappers -n {{ codeflare_generate_mcad_load_namespace }} -ojson | jq '.items[] | .metadata.name + " ==> "+ .status.state' -r >"{{ artifact_extra_logs_dir }}/appwrappers.status"
      oc describe appwrappers -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/appwrappers.desc"
    ignore_errors: true

  - name: Capture the state of the Jobs
    shell: |
      oc get Jobs -ojson -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.json"
      oc get Jobs -oyaml -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.yaml"
      oc describe Jobs -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.desc"
      oc get Jobs -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/jobs.status"
    ignore_errors: true

  - name: Capture the state of the Pods
    shell: |
      oc get Pods -ojson -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.json"
      oc get Pods -oyaml -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.yaml"
      oc describe Pods -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.desc"
      oc get Pods -owide -n {{ codeflare_generate_mcad_load_namespace }} > "{{ artifact_extra_logs_dir }}/pods.status"
    ignore_errors: true

  - name: Capture the logs of the MCAD controller
    shell: |
      oc logs deploy/{{ codeflare_generate_mcad_load_mcad_deploy }} -n {{ codeflare_generate_mcad_load_mcad_namespace }} > "{{ artifact_extra_logs_dir }}/mcad-controller.log";
      oc logs deploy/{{ codeflare_generate_mcad_load_mcad_deploy }} -n {{ codeflare_generate_mcad_load_mcad_namespace }} --previous 2>/dev/null > "{{ artifact_extra_logs_dir }}/mcad-controller.previous.log" || true
    ignore_errors: true

  - name: Capture the nodes of the cluster
    shell:
      oc get nodes -ojson > "{{ artifact_extra_logs_dir }}/nodes.json"
