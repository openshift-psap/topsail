__platforms: &all_platforms
  - podman
  - docker

ci_presets:
  to_apply: []

  variable_overrides: {}

  names: []

  local_config: null

  darwin:
    secrets.machine_info: info.darwin.yaml

  linux:
    secrets.machine_info: info.linux.yaml

  windows:
    secrets.machine_info: info.windows.yaml

secrets:
  dir:
    name: crc-container-bench-secret
    env_key: CONTAINER_BENCH_SECRET_PATH
  private_key_path: private_key
  machine_info: info.yaml
  opensearch_instances: opensearch.yaml

remote_host:
  info: "*$@secrets.machine_info"
  run_locally: false
  private_key_filename: "@secrets.private_key_path" # in the secret dir
  hostname: "" # This is set from machine info secret
  username: "" # This is set from machine info secret
  port: 22
  base_work_dir: "" # This is set from machine info secret
  ssh_flags:
    - "-oStrictHostKeyChecking=no"
    - "-oUserKnownHostsFile=/dev/null"
    - "-o LogLevel=ERROR"
    - "-oControlMaster=auto"
    - "-oControlPath=/tmp/ssh-%r@%h:%p"
    - "-oControlPersist=60s"
  system: "" # This is set from machine info secret
  arch: "" # This is set from machine info secret
  python_bin: python3
  podman_bin: podman
  docker:
    # To use Docker, you need to have Docker Desktop installed and running.
    # User must be logged in system to use Docker Desktop.
    enabled: true
    docker_bin: docker
  # Empty environment values are ignored.
  env:
    # Default PATH value is configured from secrets:
    PATH: "" # This is set from machine info secret
  home_is_base_work_dir: true
  verbose_ssh_commands: true
  exec_file_extension: "" # This is set from machine info secret

prepare:
  cleanup_on_exit: false

  brew:
    install_dependencies: false
    dependencies:
      - krunkit

  dnf:
    install_dependencies: false
    enable_docker_repo: true
    dependencies:
      - podman
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - krun
      # runtime
      - bsdtar
      # Podman build dependencies:
      - catatonit
      - conmon
      - containers-common-extra
      - gpgme-devel
      - libassuan-devel
      - libgpg-error-devel
      - libseccomp-devel
      - libselinux-devel
      - shadow-utils-subid-devel
      - make
      - sqlite-devel
      - systemd-devel
      - gcc
      - glib2-devel
      - glibc-devel
      - glibc-static
      - golang

  podman:
    # Custom binary or repo version must be disabled for matbenchmarking
    custom_binary:
      # Zip needs to contains current architecture for remote_host
      enabled: false
      url: "https://hony.fedorapeople.org/podman-custom.zip"
      server_file: "podman-{@remote_host.arch}" # Always Linux
      client_file: "podman-{@remote_host.system}-{@remote_host.arch}{@remote_host.exec_file_extension}"
    repo:
      enabled: false
      url: https://github.com/containers/podman
      version: v5.4.0
      darwin:
        file: podman-remote-release-{@remote_host.system}_{@remote_host.arch}.zip
        zip: true
      windows:
        file: podman-remote-release-{@remote_host.system}_{@remote_host.arch}.zip
        zip: true
      linux:
        file: "{@prepare.podman.repo.version}.zip"
        zip: true

    stop_on_exit: true

    linux:
      rootful: false
      runtime: crun  # runc | crun

    machine:
      enabled: true
      force_configuration: false
      set_default: true
      name: podman-machine-default
      use_configuration: true
      configuration:
        cpus: 12 # in cores
        memory: 8116 # in MB
        rootful: false
      # Empty environment values are ignored.
      env:
      # Default machine provider is configured from secrets
        CONTAINERS_MACHINE_PROVIDER: "" # This is set from machine info secret
      # CONTAINERS_HELPER_BINARY_DIR: /opt/homebrew/bin/

cleanup:
  files:
    podman: true
    exec_time: true
    venv: true

  podman_machine:
    delete: true

  docker_desktop:
    stop: true

  docker_service:
    stop: true

export_artifacts:
  enabled: false

helloworld_benchmark:
  runs: 3
  supported_container_engines:
    - podman
    - docker

exec_benchmark:
  runs: 5
  supported_container_engines:
    - podman
    - docker

image_build_large_build_context_benchmark:
  runs: 10
  supported_container_engines:
    - podman
    - docker

test:
  platform: *all_platforms
  platforms_to_skip:
  benchmark:
    - helloworld_benchmark
    # - exec_benchmark
    # - image_build_large_build_context_benchmark
  podman:
    machine_provider:
     - libkrun
     - applehv
     - wsl
     - hyperv
    rootful:
     - true
     - false
    repo_version:
     - v5.5.0
    # - custom
    runtime: # Linux only
     - crun
     - krun
     - runc
  capture_metrics:
    enabled: true

  matbenchmarking:
    enabled: true
    stop_on_error: true
    iterable_test_fields:
     - test.platform
     - test.podman.repo_version
    # - test.podman.rootful
     - test.podman.machine_provider
     - test.podman.runtime
    map_iterable_test_fields:
      test.platform: test.platform
      test.podman.repo_version: prepare.podman.repo.version
      test.podman.rootful:
        - prepare.podman.machine.configuration.rootful
        - prepare.podman.linux.rootful
      test.podman.runtime: prepare.podman.linux.runtime
      test.podman.machine_provider: prepare.podman.machine.env.CONTAINERS_MACHINE_PROVIDER

matbench:
  enabled: true
  workload: projects.container_bench.visualizations.benchmark
  preset: null
  config_file: plots.yaml
  download:
    mode: prefer_cache
    url:
    url_file:
    # if true, copy the results downloaded by `matbench download` into the artifacts directory
    save_to_artifacts: false
  # directory to plot. Set by topsail/testing/visualize.py before launching the visualization
  test_directory: null

exec_list:
  _only_: false

  pre_cleanup_ci: null
  prepare_ci: null
  test_ci: null
  post_cleanup_ci: null
  matbench_run: true
  generate_plots_from_pr_args: true
