{% set secrets_location = false | or_env(secrets.dir.env_key) %}
{% if not secrets_location %}
  {{ ("ERROR: secrets_location must be defined (secrets.dir.name="+ secrets.dir.name|string +" or env(secrets.dir.env_key=" + secrets.dir.env_key|string + ")) ") | raise_exception }}
{% endif %}
{% set s3_ldap_password_location = secrets_location + "/" + secrets.s3_ldap_password_file %}

# ---

sutest/cluster set_scale:
  name: {{ clusters.sutest.compute.machineset.name }}
{% if clusters.sutest.compute.dedicated %}
  taint: {{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}:{{ clusters.sutest.compute.machineset.taint.effect }}
{% endif %}
  disk_size: {{ clusters.sutest.compute.machineset.disk_size }}
  spot: {{ clusters.sutest.compute.machineset.spot }}
  instance_type: SET_AT_RUNTIME
  scale: SET_AT_RUNTIME

sutest/kwok set_scale:
  name: {{ clusters.sutest.compute.machineset.name }}
  taint: {{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}:{{ clusters.sutest.compute.machineset.taint.effect }}
  role: {{ clusters.sutest.compute.machineset.taint.key }}

  cpu: {{ kwok.nodes.spec.cpu }}
  memory: {{ kwok.nodes.spec.memory }}
  gpu: {{ kwok.nodes.spec.gpu }}
  pods: {{ kwok.nodes.spec.pods }}

  scale: SET_AT_RUNTIME

# ---

gpu_operator enable_time_sharing:
  replicas: {{ gpu.time_sharing.replicas }}

cluster fill_workernodes:
  namespace: {{ clusters.sutest.worker.fill_resources.namespace }}
  label_selector: {{ clusters.sutest.worker.label }}

#
# deploy RHODS
#

rhods deploy_ods:
  catalog_image: {{ rhods.catalog.image }}
  tag: {{ rhods.catalog.tag }}
  channel: {{ rhods.catalog.channel }}
  version: {{ rhods.catalog.version }}
  opendatahub: {{ rhods.catalog.opendatahub }}
  managed_rhoai: {{ rhods.catalog.managed_rhoai }}

# ---

sutest/cluster set_project_annotation/scale_test_node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.sutest.compute.machineset.taint.key }}={{ clusters.sutest.compute.machineset.taint.value }}"

sutest/cluster set_project_annotation/scale_test_toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.sutest.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.sutest.compute.machineset.taint.key }}\"}]'


#
# ---
#

scheduler cleanup:
  namespace: {{ tests.schedulers.namespace }}

scheduler create_mcad_canary:
  namespace: {{ tests.schedulers.namespace }}

scheduler generate_load:
  namespace: {{ tests.schedulers.namespace }}
  distribution: {{ tests.schedulers.distribution }}
  # the other parameters are passed at runtime with the --extra flag.
  kueue_queue: {{ tests.schedulers.kueue.queue_name }}


#
# ---
#

base_image/cluster build_push_image:
  namespace: "{{ base_image.namespace }}"
  image_local_name: "{{ base_image.imagestream }}"
  tag: "{{ base_image.repo.tag }}"
  _istag: "{{ base_image.imagestream }}:{{ base_image.repo.tag }}"

  git_repo: "{{ base_image.repo.url }}"
  git_ref: "{{ base_image.repo.ref }}" # may be overwritten at runtime with the PR ref
  dockerfile_path: "{{ base_image.repo.dockerfile_path }}"

driver/cluster set_scale:
  instance_type: {{ clusters.driver.compute.machineset.type }}
  name: {{ clusters.driver.compute.machineset.name }}
{% if clusters.driver.compute.dedicated %}
  taint: {{ clusters.driver.compute.machineset.taint.key }}={{ clusters.driver.compute.machineset.taint.value }}:{{ clusters.driver.compute.machineset.taint.effect }}
{% endif %}
  spot: {{ clusters.driver.compute.machineset.spot }}
  scale: SET_AT_RUNTIME

driver/cluster set_project_annotation/test_node_selector:
  key: openshift.io/node-selector
  value: "{{ clusters.driver.compute.machineset.taint.key }}={{ clusters.driver.compute.machineset.taint.value }}"
  project: {{ base_image.namespace }}

driver/cluster set_project_annotation/test_toleration:
  key: scheduler.alpha.kubernetes.io/defaultTolerations
  value: '[{\"operator\": \"Exists\", \"effect\": \"{{ clusters.driver.compute.machineset.taint.effect }}\", \"key\": \"{{ clusters.driver.compute.machineset.taint.key }}\"}]'
  project: {{ base_image.namespace }}

local_ci run_multi/kwok-job-controller:
  user_count: {{ kwok.job_controller.count }}
  namespace: "{{ base_image.namespace }}"
  job_name: kwok-job-controller

  istag: "{{ base_image.imagestream }}:{{ base_image.repo.tag }}"
  service_account: "{{ base_image.user.service_account }}"

  ci_command: "scheduler test run_kwok_job_controller"

  secret_name: "{{ secrets.dir.name }}"
  secret_env_key: "{{ secrets.dir.env_key }}"

  state_signal_redis_server: null
  sleep_factor: 0
  retrieve_artifacts: false
  capture_prom_db: false

  launch_as_daemon: true
